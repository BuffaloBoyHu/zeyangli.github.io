[
{
	"uri": "/cont/pages/",
	"title": "Pages organization",
	"tags": [],
	"description": "",
	"content": " In Hugo, pages are the core of your site. Once it is configured, pages are definitely the added value to your documentation site.\nFolders Organize your site like any other Hugo project. Typically, you will have a content folder with all your pages.\ncontent ├── level-one │ ├── level-two │ │ ├── level-three │ │ │ ├── level-four │ │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three/level-four │ │ │ │ ├── page-4-a.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-a │ │ │ │ ├── page-4-b.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-b │ │ │ │ └── page-4-c.md \u0026lt;-- /level-one/level-two/level-three/level-four/page-4-c │ │ │ ├── _index.md \u0026lt;-- /level-one/level-two/level-three │ │ │ ├── page-3-a.md \u0026lt;-- /level-one/level-two/level-three/page-3-a │ │ │ ├── page-3-b.md \u0026lt;-- /level-one/level-two/level-three/page-3-b │ │ │ └── page-3-c.md \u0026lt;-- /level-one/level-two/level-three/page-3-c │ │ ├── _index.md \u0026lt;-- /level-one/level-two │ │ ├── page-2-a.md \u0026lt;-- /level-one/level-two/page-2-a │ │ ├── page-2-b.md \u0026lt;-- /level-one/level-two/page-2-b │ │ └── page-2-c.md \u0026lt;-- /level-one/level-two/page-2-c │ ├── _index.md \u0026lt;-- /level-one │ ├── page-1-a.md \u0026lt;-- /level-one/page-1-a │ ├── page-1-b.md \u0026lt;-- /level-one/page-1-b │ └── page-1-c.md \u0026lt;-- /level-one/page-1-c ├── _index.md \u0026lt;-- / └── page-top.md \u0026lt;-- /page-top  _index.md is required in each folder, it’s your “folder home page”\n Types Hugo-theme-learn defines two types of pages. Default and Chapter. Both can be used at any level of the documentation, the only difference being layout display.\nA Chapter displays a page meant to be used as introduction for a set of child pages. Commonly, it contains a simple title and a catch line to define content that can be found under it. You can define any HTML as prefix for the menu. In the example below, it\u0026rsquo;s just a number but that could be an icon.\n+++ title = \u0026quot;Basics\u0026quot; chapter = true weight = 5 pre = \u0026quot;\u0026lt;b\u0026gt;1. \u0026lt;/b\u0026gt;\u0026quot; +++ ### Chapter 1 # Basics Discover what this Hugo theme is all about and the core-concepts behind it.  To tell Hugo-theme-learn to consider a page as a chapter, set chapter=true in the Front Matter of the page.\nA Default page is any other content page.\n+++ title = \u0026quot;Installation\u0026quot; weight = 15 +++  The following steps are here to help you initialize your new website. If you don\u0026rsquo;t know Hugo at all, we strongly suggest you to train by following this great documentation for beginners.\nCreate your project Hugo provides a new command to create a new website.\nhugo new site \u0026lt;new_project\u0026gt;  Hugo-theme-learn provides archetypes to help you create this kind of pages.\nFront Matter configuration Each Hugo page has to define a Front Matter in yaml, toml or json.\nHugo-theme-learn uses the following parameters on top of Hugo ones :\n+++ # Table of content (toc) is enabled by default. Set this parameter to true to disable it. # Note: Toc is always disabled for chapter pages disableToc = \u0026quot;false\u0026quot; # If set, this will be used for the page's menu entry (instead of the `title` attribute) menuTitle = \u0026quot;\u0026quot; # The title of the page in menu will be prefixed by this HTML content pre = \u0026quot;\u0026quot; # The title of the page in menu will be postfixed by this HTML content post = \u0026quot;\u0026quot; # Set the page as a chapter, changing the way it's displayed chapter = false # Hide a menu entry by setting this to true hidden = false # Display name of this page modifier. If set, it will be displayed in the footer. LastModifierDisplayName = \u0026quot;\u0026quot; # Email of this page modifier. If set with LastModifierDisplayName, it will be displayed in the footer LastModifierEmail = \u0026quot;\u0026quot; +++  Add icon to a menu entry In the page frontmatter, add a pre param to insert any HTML code before the menu label. The example below uses the Github icon.\n+++ title = \u0026quot;Github repo\u0026quot; pre = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; \u0026quot; +++  Ordering sibling menu/page entries Hugo provides a flexible way to handle order for your pages.\nThe simplest way is to set weight parameter to a number.\n+++ title = \u0026quot;My page\u0026quot; weight = 5 +++  Using a custom title for menu entries By default, Hugo-theme-learn will use a page\u0026rsquo;s title attribute for the menu item (or linkTitle if defined).\nBut a page\u0026rsquo;s title has to be descriptive on its own while the menu is a hierarchy. We\u0026rsquo;ve added the menuTitle parameter for that purpose:\nFor example (for a page named content/install/linux.md):\n+++ title = \u0026quot;Install on Linux\u0026quot; menuTitle = \u0026quot;Linux\u0026quot; +++  Homepage To configure your home page, you basically have three choices:\n Create an _index.md document in content folder and fill the file with Markdown content Create an index.html file in the static folder and fill the file with HTML content Configure your server to automatically redirect home page to one your documentation page  "
},
{
	"uri": "/basics/",
	"title": "Jenkins基础管理",
	"tags": [],
	"description": "",
	"content": " Chapter 1 Jenkins基础管理 😺您好，本模块主要讲解Jenkins的基本功能，属于基础知识自由选择跳过！\n    章节名称 章节内容     1-1 JENKINS简介与应用 本章我们将介绍Jenkins，让大家认识Jenkins，它能做什么？   1-2 JENKINS安装部署 本章我们将指导大家如何安装Jenkins，很简单，让我们一起来安装吧！   1-3 JENKINS用户与权限管理 本章我们将指导大家在Jenkins中如何管理用户及用户权限   1-4 JENKINS凭据管理 本章我们将指导大家如何管理Jenkins的凭据   1-5 JENKINS项目与视图管理 本章我们将指导大家Jenkins中的项目类型，通过视图对项目进行管理    "
},
{
	"uri": "/cont/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " Chapter 2 Content Find out how to create and organize your content quickly and intuitively.\n"
},
{
	"uri": "/cont/archetypes/",
	"title": "Archetypes",
	"tags": [],
	"description": "",
	"content": " Using the command: hugo new [relative new content path], you can start a content file with the date and title automatically set. While this is a welcome feature, active writers need more : archetypes.\nIt is pre-configured skeleton pages with default front matter. Please refer to the documentation for types of page to understand the differences.\nChapter To create a Chapter page, run the following commands\nhugo new --kind chapter \u0026lt;name\u0026gt;/_index.md  It will create a page with predefined Front-Matter:\n+++ title = \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; date = {{ .Date }} weight = 5 chapter = true pre = \u0026quot;\u0026lt;b\u0026gt;X. \u0026lt;/b\u0026gt;\u0026quot; +++ ### Chapter X # Some Chapter title Lorem Ipsum.  Default To create a default page, run either one of the following commands\n# Either hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;/_index.md # Or hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;.md  It will create a page with predefined Front-Matter:\n+++ title = \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; date = {{ .Date }} weight = 5 +++ Lorem Ipsum.  "
},
{
	"uri": "/cont/archetypes.fr/",
	"title": "Archétypes",
	"tags": [],
	"description": "",
	"content": " En utilisant la commande: hugo new [chemin vers nouveau contenu], vous pouvez créer un nouveau fichier avec la date et le title automatiquement initialisé. Même si c\u0026rsquo;est une fonctionnalité intéressante, elle reste limitée pour les auteurs actifs qui ont besoin de mieux : les archetypes.\nLes archétypes sont des squelettes de pages préconfigurées avec un Front Matter par défaut. Merci de vous référer à la documentation pour connaitre les différents types de page.\nChapitre Pour créer un chapitre, lancez les commandes suivantes\nhugo new --kind chapter \u0026lt;name\u0026gt;/_index.md  Cela crééra une page avec le Front Matter suivant:\n+++ title = \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; date = {{ .Date }} weight = 5 chapter = true pre = \u0026quot;\u0026lt;b\u0026gt;X. \u0026lt;/b\u0026gt;\u0026quot; +++ ### Chapter X # Some Chapter title Lorem Ipsum.  Défaut Pour créer une page classique, lancer l\u0026rsquo;une des deux commandes suivantes\n# Soit hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;/_index.md # Ou hugo new \u0026lt;chapter\u0026gt;/\u0026lt;name\u0026gt;.md  Cela crééra une page avec le Front Matter suivant:\n+++ title = \u0026quot;{{ replace .Name \u0026quot;-\u0026quot; \u0026quot; \u0026quot; | title }}\u0026quot; date = {{ .Date }} weight = 5 +++ Lorem Ipsum.  "
},
{
	"uri": "/basics/introduction/",
	"title": "Jenkins简介与应用",
	"tags": [],
	"description": "",
	"content": " 大家好，本章我们将介绍Jenkins，让大家认识Jenkins！告诉大家Jenkins是什么？ 它能做什么？\n 目录  简单介绍 发展历史 功能特点 应用场景 web页面展示  简单介绍 Jenkins前身是Hudson，使用java语言开发的自动化发布工具。在中大型金融等企业中普遍使用Jenkins来作为项目发布工具。 Jenkins官方提供的插件使Jenkins更为强大。Jenkins是一个自动化服务器，目前发展超过15年，比较成熟的CI工具（也可以CD）能够实现自动化集成发布。建立好流水线后，期间无需专业运维人员介入，开发人员随时发布部署，任性!。\n发展历史  Jenkins的前身是Hudson，采用JAVA编写的持续集成开源工具。 Hudson由Sun公司在2004年启动，第一个版本于2005年在java.net发布。 2007年开始Hudson逐渐取代CruiseControl和其他的开源构建工具的江湖地位。 在2008年的JavaOne大会上在开发者解决方案中获得杜克选择大奖（Duke’s Choice Award）。\n 在2010年11月期间，因为Oracle对Sun的收购带来了Hudson的所有权问题。主要的项目贡献者和Oracle之间， 尽管达成了很多协议，但有个关键问题就是商标名称“Hudson”。\n 甲骨文在2010年12月声明拥有该名称并申请商标的权利。因此，2011年1月11日，有人要求投票将项目名称从“Hudson”改为“Jenkins”。\n 2011年1月29日，该建议得到社区投票的批准，创建了Jenkins项目。\n 2011年2月1日，甲骨文表示，他们打算继续开发Hudson，并认为Jenkins只是一个分支，而不是重命名。因此，Jenkins和Hudson继续作为两个独立的项目，每个都认为对方是自己的分支。\n 到2013年12月，GitHub上的Jenkins拥有567个项目成员和约1,100个公共仓库，与此相对的Hudson有32个项目成员和17个公共仓库。到现在两者的差异更多，应该说Jenkins已经全面超越了Hudson。此外，大家可能是出于讨厌Oracle的情绪，作为Java开发者天然地应该支持和使用Jenkins。\n  功能特点  开源免费 多平台支持（windows/linux/macos） 主从分布式架构 提供web可视化配置管理页面 安装配置简单 插件资源丰富  应用场景  集成svn/git客户端实现源代码下载检出 集成maven/ant/gradle/npm等构建工具实现源码编译打包单元测试 集成sonarqube对源代码进行质量检查（坏味道、复杂度、新增bug等） 集成SaltStack/Ansible实现自动化部署发布 集成Jmeter/Soar/Kubernetes/\u0026hellip;.. 可以自定义插件或者脚本通过jenkins传参运行 可以说Jenkins比较灵活插件资源丰富，日常运维工作都可以自动化。  web页面展示  管理页面: 系统管理页面包含系统管理、全局安全管理、全局工具配置、节点管理、授权管理、插件管理、系统备份管理、日志监控管理   项目管理页面: 项目、项目状态、项目视图、构建队列等信息   构建输出页面: 用于查看项目的构建详情，能够看到项目的构建过程及详细日志。  "
},
{
	"uri": "/pipelinesyntax/",
	"title": "流水线核心语法",
	"tags": [],
	"description": "",
	"content": " Chapter 2 流水线核心语法 😺您好，本模块主要讲解Jenkins 流水线核心语法！\n    章节名称 章节内容     2-1 编写jenkinsfile 本章我们将介绍Jenkinsfile的语法 让大家认识流水线编写   2-2 Jenkins流水线语法 本章我们将为大家详细讲述流水线语法   2-3 Jenkins共享库应用 本章我们将主要学习Jenkins共享库的配置   2-4 Groovy基础语法 本章主要讲述Groovy编程基础语法   2-5 流水线开发工具 本章我们主要讲述常用的流水线开发工具    "
},
{
	"uri": "/shortcodes/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "title: Shortcodes pre: \u0026ldquo;3. \u0026ldquo;\nHugo uses Markdown for its simple content format. However, there are a lot of things that Markdown doesn’t support well. You could use pure HTML to expand possibilities.\nBut this happens to be a bad idea. Everyone uses Markdown because it\u0026rsquo;s pure and simple to read even non-rendered. You should avoid HTML to keep it as simple as possible.\nTo avoid this limitations, Hugo created shortcodes. A shortcode is a simple snippet inside a page.\nHugo-theme-learn provides multiple shortcodes on top of existing ones.\n Attachments  The Attachments shortcode displays a list of files attached to a page.\n Attachments (Pièces jointes)  The Attachments shortcode displays a list of files attached to a page.\n Button  Nice buttons on your page.\n Button (Bouton)  De beaux boutons sur votre page.\n Children  List the child pages of a page\n Expand  Displays an expandable/collapsible section of text on your page\n Expand  Affiche une section de texte qui se plie et se déplie\n Mermaid  Generation of diagram and flowchart from text in a similar manner as markdown\n Mermaid  Génération de diagrammes à partir de texte, dans le même style que Markdown\n Notice  Disclaimers to help you structure your page\n Notice  Message pour vous aider à structurer votre contenu\n Site param  Get value of site params variables in your page.\n Site param  Afficher la valeur d\u0026#39;un paramètre global du site dans votre page\n "
},
{
	"uri": "/cont/markdown/",
	"title": "Markdown syntax",
	"tags": [],
	"description": "",
	"content": " This page is a shameful copy of the great Grav original page. Only difference is information about image customization (resizing, add CSS classes\u0026hellip;)\n Let\u0026rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters so it\u0026rsquo;s also quicker to write content. Less chance of errors when writing in markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. \u0026ndash; John Gruber\n Grav ships with built-in support for Markdown and Markdown Extra. You must enable Markdown Extra in your system.yaml configuration file\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\n Bookmark this page for easy future reference!\n Headings Headings from h1 through h6 are constructed with a # for each level:\n# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading  Renders to:\nh1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading HTML:\n\u0026lt;h1\u0026gt;h1 Heading\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;h2 Heading\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h3 Heading\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h4 Heading\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h5 Heading\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h6 Heading\u0026lt;/h6\u0026gt;  Comments Comments should be HTML compatible\n\u0026lt;!-- This is a comment --\u0026gt;  Comment below should NOT be seen:\nHorizontal Rules The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  renders to:\nBody Copy Body copy written as normal, plain text will be wrapped with \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.  renders to this HTML:\n\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u0026lt;/p\u0026gt;  Emphasis Bold For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text**  renders to:\nrendered as bold text\nand this HTML\n\u0026lt;strong\u0026gt;rendered as bold text\u0026lt;/strong\u0026gt;  Italics For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n_rendered as italicized text_  renders to:\nrendered as italicized text\nand this HTML:\n\u0026lt;em\u0026gt;rendered as italicized text\u0026lt;/em\u0026gt;  strikethrough In GFM (GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~  Which renders to:\nStrike through this text.\nHTML:\n\u0026lt;del\u0026gt;Strike through this text.\u0026lt;/del\u0026gt;  Blockquotes For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote.\n\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.  Renders to:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n and this HTML:\n\u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fusion Drive\u0026lt;/strong\u0026gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt;  Blockquotes can also be nested:\n\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u0026gt; \u0026gt; \u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. \u0026gt; \u0026gt; Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.  Renders to:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\n Notices The old mechanism for notices overriding the block quote syntax (\u0026gt;\u0026gt;\u0026gt;) has been deprecated. Notices are now handled via a dedicated plugin called Markdown Notices\n Lists Unordered A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet - valid bullet + valid bullet  For example\n+ Lorem ipsum dolor sit amet + Consectetur adipiscing elit + Integer molestie lorem at massa + Facilisis in pretium nisl aliquet + Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at + Faucibus porta lacus fringilla vel + Aenean sit amet erat nunc + Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at  Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Phasellus iaculis neque\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Purus sodales ultricies\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Vestibulum laoreet porttitor sem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ac tristique libero volutpat at\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  Ordered A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;  TIP: If you just use 1. for each number, Markdown will automatically number each item. For example:\n1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Code Inline code Wrap inline snippets of code with `.\nIn this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**.  Renders to:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped as code.\nHTML:\n\u0026lt;p\u0026gt;In this example, \u0026lt;code\u0026gt;\u0026amp;lt;section\u0026amp;gt;\u0026amp;lt;/section\u0026amp;gt;\u0026lt;/code\u0026gt; should be wrapped as \u0026lt;strong\u0026gt;code\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt;  Indented code Or indent several lines of code by at least four spaces, as in:\n // Some comments line 1 of code line 2 of code line 3 of code  Renders to:\n// Some comments line 1 of code line 2 of code line 3 of code  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt; // Some comments line 1 of code line 2 of code line 3 of code \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt;  Block code \u0026ldquo;fences\u0026rdquo; Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code.\n ``` markup Sample text here... ```  Sample text here...  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt;Sample text here...\u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt;  Syntax highlighting GFM, or \u0026ldquo;GitHub Flavored Markdown\u0026rdquo; also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, `js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code:\n ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ```  Renders to:\ngrunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } };  Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |  Renders to:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    And this HTML:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Option\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Description\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;path to data files to supply the data that will be passed into templates.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;engine\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;engine to be used for processing templates. Handlebars is the default.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ext\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;extension to be used for dest files.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;  Right aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column.\n| Option | Description | | ------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |     Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Links Basic link [Assemble](http://assemble.io)  Renders to (hover over the link, there is no tooltip):\nAssemble\nHTML:\n\u0026lt;a href=\u0026quot;http://assemble.io\u0026quot;\u0026gt;Assemble\u0026lt;/a\u0026gt;  Add a title [Upstage](https://github.com/upstage/ \u0026quot;Visit Upstage!\u0026quot;)  Renders to (hover over the link, there should be a tooltip):\nUpstage\nHTML:\n\u0026lt;a href=\u0026quot;https://github.com/upstage/\u0026quot; title=\u0026quot;Visit Upstage!\u0026quot;\u0026gt;Upstage\u0026lt;/a\u0026gt;  Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n# Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3)  will jump to these sections:\n## Chapter 1 \u0026lt;a id=\u0026quot;chapter-1\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 2 \u0026lt;a id=\u0026quot;chapter-2\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 3 \u0026lt;a id=\u0026quot;chapter-3\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one.  NOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\nImages Images have a similar syntax to links but include a preceding exclamation point.\n![Minion](https://octodex.github.com/images/minion.png)  or\n![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \u0026quot;The Stormtroopocat\u0026quot;)  Like links, Images also have a footnote style syntax\nAlternative usage : note images ![Alt text][id]  With a reference later in the document defining the URL location:\n[id]: https://octodex.github.com/images/dojocat.jpg \u0026quot;The Dojocat\u0026quot;  Resizing image Add HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](https://octodex.github.com/images/minion.png?width=20pc)  ![Minion](https://octodex.github.com/images/minion.png?height=50px)  ![Minion](https://octodex.github.com/images/minion.png?height=50px\u0026amp;width=300px)  Add CSS classes Add a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=shadow)  ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border)  ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border,shadow)  "
},
{
	"uri": "/cont/markdown.fr/",
	"title": "Syntaxe Markdown",
	"tags": [],
	"description": "",
	"content": " Cette page est une copie de la doc de Grav. La seule différence porte sur la personalisation des images (taille, ajout de classes CSS\u0026hellip;) Pour des raisons évidentes, cette page n\u0026rsquo;a pas été traduites en français 😁\n Let\u0026rsquo;s face it: Writing content for the Web is tiresome. WYSIWYG editors help alleviate this task, but they generally result in horrible code, or worse yet, ugly web pages.\nMarkdown is a better way to write HTML, without all the complexities and ugliness that usually accompanies it.\nSome of the key benefits are:\n Markdown is simple to learn, with minimal extra characters so it\u0026rsquo;s also quicker to write content. Less chance of errors when writing in markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use!  John Gruber, the author of Markdown, puts it like this:\n The overriding design goal for Markdown’s formatting syntax is to make it as readable as possible. The idea is that a Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. While Markdown’s syntax has been influenced by several existing text-to-HTML filters, the single biggest source of inspiration for Markdown’s syntax is the format of plain text email. \u0026ndash; John Gruber\n Grav ships with built-in support for Markdown and Markdown Extra. You must enable Markdown Extra in your system.yaml configuration file\nWithout further delay, let us go over the main elements of Markdown and what the resulting HTML looks like:\n Bookmark this page for easy future reference!\n Headings Headings from h1 through h6 are constructed with a # for each level:\n# h1 Heading ## h2 Heading ### h3 Heading #### h4 Heading ##### h5 Heading ###### h6 Heading  Renders to:\nh1 Heading h2 Heading h3 Heading h4 Heading h5 Heading h6 Heading HTML:\n\u0026lt;h1\u0026gt;h1 Heading\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;h2 Heading\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;h3 Heading\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;h4 Heading\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;h5 Heading\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;h6 Heading\u0026lt;/h6\u0026gt;  Comments Comments should be HTML compatible\n\u0026lt;!-- This is a comment --\u0026gt;  Comment below should NOT be seen:\nHorizontal Rules The HTML \u0026lt;hr\u0026gt; element is for creating a \u0026ldquo;thematic break\u0026rdquo; between paragraph-level elements. In markdown, you can create a \u0026lt;hr\u0026gt; with any of the following:\n ___: three consecutive underscores ---: three consecutive dashes ***: three consecutive asterisks  renders to:\nBody Copy Body copy written as normal, plain text will be wrapped with \u0026lt;p\u0026gt;\u0026lt;/p\u0026gt; tags in the rendered HTML.\nSo this body copy:\nLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.  renders to this HTML:\n\u0026lt;p\u0026gt;Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u0026lt;/p\u0026gt;  Emphasis Bold For emphasizing a snippet of text with a heavier font-weight.\nThe following snippet of text is rendered as bold text.\n**rendered as bold text**  renders to:\nrendered as bold text\nand this HTML\n\u0026lt;strong\u0026gt;rendered as bold text\u0026lt;/strong\u0026gt;  Italics For emphasizing a snippet of text with italics.\nThe following snippet of text is rendered as italicized text.\n_rendered as italicized text_  renders to:\nrendered as italicized text\nand this HTML:\n\u0026lt;em\u0026gt;rendered as italicized text\u0026lt;/em\u0026gt;  strikethrough In GFM (GitHub flavored Markdown) you can do strikethroughs.\n~~Strike through this text.~~  Which renders to:\nStrike through this text.\nHTML:\n\u0026lt;del\u0026gt;Strike through this text.\u0026lt;/del\u0026gt;  Blockquotes For quoting blocks of content from another source within your document.\nAdd \u0026gt; before any text you want to quote.\n\u0026gt; **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.  Renders to:\n Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\n and this HTML:\n\u0026lt;blockquote\u0026gt; \u0026lt;p\u0026gt;\u0026lt;strong\u0026gt;Fusion Drive\u0026lt;/strong\u0026gt; combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined.\u0026lt;/p\u0026gt; \u0026lt;/blockquote\u0026gt;  Blockquotes can also be nested:\n\u0026gt; Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u0026gt; \u0026gt; \u0026gt; Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. \u0026gt; \u0026gt; Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.  Renders to:\n Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi.\n Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam.\n Mauris sit amet ligula egestas, feugiat metus tincidunt, luctus libero. Donec congue finibus tempor. Vestibulum aliquet sollicitudin erat, ut aliquet purus posuere luctus.\n Notices The old mechanism for notices overriding the block quote syntax (\u0026gt;\u0026gt;\u0026gt;) has been deprecated. Notices are now handled via a dedicated plugin called Markdown Notices\n Lists Unordered A list of items in which the order of the items does not explicitly matter.\nYou may use any of the following symbols to denote bullets for each list item:\n* valid bullet - valid bullet + valid bullet  For example\n+ Lorem ipsum dolor sit amet + Consectetur adipiscing elit + Integer molestie lorem at massa + Facilisis in pretium nisl aliquet + Nulla volutpat aliquam velit - Phasellus iaculis neque - Purus sodales ultricies - Vestibulum laoreet porttitor sem - Ac tristique libero volutpat at + Faucibus porta lacus fringilla vel + Aenean sit amet erat nunc + Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit  Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at  Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Phasellus iaculis neque\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Purus sodales ultricies\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Vestibulum laoreet porttitor sem\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Ac tristique libero volutpat at\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt;  Ordered A list of items in which the order of items does explicitly matter.\n1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  And this HTML:\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;Lorem ipsum dolor sit amet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Consectetur adipiscing elit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Integer molestie lorem at massa\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Facilisis in pretium nisl aliquet\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Nulla volutpat aliquam velit\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Faucibus porta lacus fringilla vel\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Aenean sit amet erat nunc\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;Eget porttitor lorem\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt;  TIP: If you just use 1. for each number, Markdown will automatically number each item. For example:\n1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem  Renders to:\n Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem  Code Inline code Wrap inline snippets of code with `.\nIn this example, `\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;` should be wrapped as **code**.  Renders to:\nIn this example, \u0026lt;section\u0026gt;\u0026lt;/section\u0026gt; should be wrapped with code.\nHTML:\n\u0026lt;p\u0026gt;In this example, \u0026lt;code\u0026gt;\u0026amp;lt;section\u0026amp;gt;\u0026amp;lt;/section\u0026amp;gt;\u0026lt;/code\u0026gt; should be wrapped with \u0026lt;strong\u0026gt;code\u0026lt;/strong\u0026gt;.\u0026lt;/p\u0026gt;  Indented code Or indent several lines of code by at least four spaces, as in:\n // Some comments line 1 of code line 2 of code line 3 of code  Renders to:\n// Some comments line 1 of code line 2 of code line 3 of code  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt; // Some comments line 1 of code line 2 of code line 3 of code \u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt;  Block code \u0026ldquo;fences\u0026rdquo; Use \u0026ldquo;fences\u0026rdquo; ``` to block in multiple lines of code.\n ``` markup Sample text here... ```  Sample text here...  HTML:\n\u0026lt;pre\u0026gt; \u0026lt;code\u0026gt;Sample text here...\u0026lt;/code\u0026gt; \u0026lt;/pre\u0026gt;  Syntax highlighting GFM, or \u0026ldquo;GitHub Flavored Markdown\u0026rdquo; also supports syntax highlighting. To activate it, simply add the file extension of the language you want to use directly after the first code \u0026ldquo;fence\u0026rdquo;, `js, and syntax highlighting will automatically be applied in the rendered HTML. For example, to apply syntax highlighting to JavaScript code:\n ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ```  Renders to:\ngrunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } };  Tables Tables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned.\n| Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |  Renders to:\n   Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    And this HTML:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th\u0026gt;Option\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;Description\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;data\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;path to data files to supply the data that will be passed into templates.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;engine\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;engine to be used for processing templates. Handlebars is the default.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;ext\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;extension to be used for dest files.\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;  Right aligned text Adding a colon on the right side of the dashes below any heading will right align text for that column.\n| Option | Description | | ------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. |     Option Description     data path to data files to supply the data that will be passed into templates.   engine engine to be used for processing templates. Handlebars is the default.   ext extension to be used for dest files.    Links Basic link [Assemble](http://assemble.io)  Renders to (hover over the link, there is no tooltip):\nAssemble\nHTML:\n\u0026lt;a href=\u0026quot;http://assemble.io\u0026quot;\u0026gt;Assemble\u0026lt;/a\u0026gt;  Add a title [Upstage](https://github.com/upstage/ \u0026quot;Visit Upstage!\u0026quot;)  Renders to (hover over the link, there should be a tooltip):\nUpstage\nHTML:\n\u0026lt;a href=\u0026quot;https://github.com/upstage/\u0026quot; title=\u0026quot;Visit Upstage!\u0026quot;\u0026gt;Upstage\u0026lt;/a\u0026gt;  Named Anchors Named anchors enable you to jump to the specified anchor point on the same page. For example, each of these chapters:\n# Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3)  will jump to these sections:\n## Chapter 1 \u0026lt;a id=\u0026quot;chapter-1\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 2 \u0026lt;a id=\u0026quot;chapter-2\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one. ## Chapter 3 \u0026lt;a id=\u0026quot;chapter-3\u0026quot;\u0026gt;\u0026lt;/a\u0026gt; Content for chapter one.  NOTE that specific placement of the anchor tag seems to be arbitrary. They are placed inline here since it seems to be unobtrusive, and it works.\nImages Images have a similar syntax to links but include a preceding exclamation point.\n![Minion](https://octodex.github.com/images/minion.png)  or\n![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \u0026quot;The Stormtroopocat\u0026quot;)  Like links, Images also have a footnote style syntax\nAlternative usage : note images ![Alt text][id]  With a reference later in the document defining the URL location:\n[id]: https://octodex.github.com/images/dojocat.jpg \u0026quot;The Dojocat\u0026quot;  Resizing image Add HTTP parameters width and/or height to the link image to resize the image. Values are CSS values (default is auto).\n![Minion](https://octodex.github.com/images/minion.png?width=20pc)  ![Minion](https://octodex.github.com/images/minion.png?height=50px)  ![Minion](https://octodex.github.com/images/minion.png?height=50px\u0026amp;width=300px)  Add CSS classes Add a HTTP classes parameter to the link image to add CSS classes. shadowand border are available but you could define other ones.\n![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=shadow)  ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border)  ![stormtroopocat](https://octodex.github.com/images/stormtroopocat.jpg?classes=border,shadow)  "
},
{
	"uri": "/pipelineintegrated/chapter01/",
	"title": "3-1 构建发布工具集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章主要讲解与构建工具和发布部署工具的集成！例如： Maven、Ant、Gradle、Npm、Saltstack、Ansible 😀\n 目录  构建工具安装  软件包下载 配置环境  构建工具集成  通过Jenkins配置 通过Jenkinsfile配置  发布工具安装  安装saltstck 安装ansible  发布工具集成  构建工具安装 构建工具是安装到master还是node节点呢？ 很显然安装在master节点并不友好，一般我们不会让master节点执行构建任务的，我们都是使用node节点完成构建任务。所以我们要部署在node节点中哦。（当然我只是做实验所以部署到了master节点，生产环境不要这么做哦！）\n 这些构建工具的安装很简单的，只需要在每个构建工具的官网找到软件包，然后下载到本地解压并配置环境变量就好了。接下来我们实践一下！\n软件包下载  maven软件包下载 gradle软件包下载 ant软件包下载 node软件包下载  配置环境 #解压 tar zxf apache-maven-xxxx.tar.gz -C /usr/local tar zxf gradle-xxxx.tar.gz -C /usr/local tar zxf node-xxxxx.tar.gz -C /usr/local tar zxf apache-ant-xxxx.tar.gz -C /usr/local #添加环境变量 vim /etc/profile export MAVEN_HOME=/usr/local/apache-maven-3.6.0 export ANT_HOME=/usr/local/apache-ant-1.10.5 export GRADLE_HOME=/usr/local/gradle-5.3 export NODE_HOME=/usr/local/node-v10.15.3-linux-x64 export JAVA_HOME=/usr/local/jdk1.8.0_201 export PATH=$PATH:$MAVEN_HOME/bin:$ANT_HOME/bin:$GRADLE_HOME/bin:$NODE_HOME/bin export PATH=$PATH:$JAVA_HOME/bin # 生效全局环境变量 source /etc/profile  构建工具集成 在这里需要强调一下，Jenkins调用这些工具的方式是通过环境变量调用。有两种方式 一种是在Jenkins系统配置中添加构建工具的环境变量，一种是直接在Jenkinsfile中定义。实现的效果没有区别，而后者更加灵活对于配置Jenkins无状态化有好处。\n通过Jenkins配置 我们打开系统管理-\u0026gt; 全局工具配置页面，这里就是配置我们在运行流水线过程中使用的构建工具的地方。如果没有找到maven需要安装插件Maven Integration才能有哦。\n 在这里我们通过变量名和变量值的方式定义好构建工具，变量名称不能冲突，可以大小写。关于变量的值保守点可以定义成MAVE_HOME/usr/local/apache-maven-3.6.0/，也可以写成绝对路径/usr/local/apache-maven-3.6.0/bin/mvn。 定义好工具之后我们如何在Jenkinsfile中使用工具呢？\n在Jenkinsfile中使用: 如上图所示，我定义的maven变量名称为M3,接下来在Jenkinsfile中使用tool获取变量值。如下：\nstage(\u0026quot;mavenBuild\u0026quot;){ steps{ script{ def mvnHome = tool 'M3' sh \u0026quot;${mvnHome}/bin/mvn clean package \u0026quot; } } }  通过Jenkinsfile配置 在Jenkinsfile中定义其实跟我们在上面的系统中定义是一样的，我们只需要将变量名和值直接定义在文件中。然后直接调用。\nstage(\u0026quot;mavenBuild\u0026quot;){ steps{ script{ def mvnHome = '/usr/local/apache-maven-3.6.0' sh \u0026quot;${mvnHome}/bin/mvn clean package \u0026quot; } } }  现在你是否清楚了关于构建工具的集成呢？类似的例如您当前用的构建工具不在我的举例范围内，相信你通过这篇文章也知道了如何来进行集成了。对的没错：在系统中安装好构建工具，在jenkinsfile中定义好环境变量即可。特殊工具特殊对待哦！\n发布工具安装 关于发布工具我们常用的是saltstack和ansible这个两个工具，这里简单说下如何集成。\n安装saltstck saltstack也是C/S架构，需要在应用服务器安装salt-minion客户端。\nyum源：https://mirrors.tuna.tsinghua.edu.cn/saltstack/#rhel\n#install yum –y install salt-master salt-minion #start service salt-master start service salt-minion start #enable chkconfig salt-master on chkconfig salt-minion on  安装ansible ansible不需要安装客户端，是通过SSH协议通信的。使用/etc/ansible/hosts文件控制主机。\nyum install epel-release ansbile service ansible start  发布工具集成 stage(\u0026quot;SlatDeploy\u0026quot;){ steps{ script{ //saltstack sh \u0026quot; salt ${host} test.ping \u0026quot; //ansible sh \u0026quot; ansible -m ping ${host} \u0026quot; } } }  关于发布工具暂且就这些了，有关发布工具的详细内容还需要各位自行在官方阅读哦。saltstack有API服务可以在jenkinsfile中封装HTTP API。\n"
},
{
	"uri": "/basics/installation/",
	"title": "Jenkins安装部署",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们将指导大家如何安装Jenkins，很简单，让我们一起来安装吧！ 😀\n 目录  先决条件\n 软件要求 硬件要求  软件包下载\n war包部署 linux系统部署 mac系统部署 windows系统部署  安装后基本配置\n 解锁 自定义jenkins插件 创建用户 配置更新站点 安装slave节点 jenkins配置文件   先决条件 软件要求  Java8 无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。  硬件要求  最低配置： 256MB可用内存，1GB可用磁盘空间（Docker推荐10GB）。 小团队配置： 1GB+可用内存， 50GB+可用磁盘空间。  软件包下载  最新war包 最新pkg包 最新exe包 最新rpm包  war包部署 Jenkins的web应用程序archive（war）包是可以在任何支持Java的操作系统上运行。\n 将下载的war包放到jenkins的目录中（可以自定义)。 运行命令 java -jar jenkins.war启动。 此时可以看到Jenkins的启动日志，查看是否有异常。 通过浏览器访问http://localhost:8080。  注意：可以通过 –httpPort方式指定端口， java -jar jenkins.war -httpPort=9090。\n linux系统部署  首先下载rpm软件包,安装rpm –ivh jenkins-2.150.3-1.1.noarch.rpm systemctl start jenkins #启动服务 systemctl enable jenkins #开机自启  mac系统部署 下载软件包手动安装\n brew install jenkins 安装jenkins最新版本 brew install jenkins-lts 安装jenkinsLTS版本  windows系统部署 下载软件包通过向导安装即可。\n安装后基本配置 解锁 当您第一次访问Jenkins的时候，系统会要求您使用自动生成的密码对其进行解锁。解锁秘钥可以通过$JENKINS_HOME/secrets/initialAdminPassword文件获取。还可以通过在启动日志中获取。\n 自定义jenkins插件  解锁Jenkins之后再自定义Jenkins页面，您可以安装任何数量的插件作为初始化的一部分。 分别是安装建议的插件和选择要安装的插件（如果不确定要安装那些的时候可以选择此选项，灵活的自定义安装）。 插件安装多了也没关系，可以后面再jenkins插件管理页面删除哦(会很繁琐)。  创建用户 在这里创建一个管理员账号，到此jenkins的初始化配置已完成。 配置更新站点 当改完后，其实还是很慢 🤷‍♀️ 建议配置nginx做域名代理 😜\n 由于使用官方的站点速度相对很慢，这里采用清华大学的jenkins更新站点。\n安装slave节点 😜 注意需要开启jnlp协议才能使用java web启动，具体操作： 系统设置-\u0026gt; 全局安全 -\u0026gt; 代理配置\n 系统管理-\u0026gt;节点管理\n创建完成后会出现slave节点启动的命令，下载agent.jar，然后启动服务。\n启动命令\nwget http://192.168.0.41/jnlpJars/agent.jar java -jar agent.jar -jnlpUrl http://192.168.0.41/computer/test1/slave-agent.jnlp -secret 807b0135fb5b071d99930166ac4fc5dd0cf355e670a66da73120dfa2e8cebc5f -workDir \u0026quot;/var/lib/jenkins\u0026quot;  启动成功 jenkins配置文件 以rpm方式部署的配置文件在/etc/sysconfig/jenkins，可以定义Jenkins启动参数和端口。\n"
},
{
	"uri": "/pipelinesyntax/chapter01/",
	"title": "开始编写Jenkinsfile",
	"tags": [],
	"description": "",
	"content": " 您好，还在疑惑什么是流水线吗？ 本章我们将告诉您如何运行一条流水线 赶快学习吧！ 😀\n 目录  为什么使用pipeline? pipeline定义 pipeline演示 验证流水线效果  为什么使用pipeline? 本质上，jenkins是一个自动化引擎，它支持许多自动模式。流水线向Jenkins添加了一组强大的工具，支持用例、简单的持续集成到全面的持续交付流水线。 通过对一系列的发布任务建立标准的模板，用户可以利用更多流水线的特性，比如：\n 代码化: 流水线是在代码中实现的，通常会存放到源代码控制，使团队具有编辑、审查和更新他们项目的交付流水线的能力。\n 耐用性：流水线可以从Jenkins的master节点重启后继续运行。\n 可暂停的：流水线可以由人功输入或批准继续执行流水线。\n 解决复杂发布： 支持复杂的交付流程。例如循环、并行执行。\n 可扩展性： 支持扩展DSL和其他插件集成。\n  构建一个可扩展是Jenkins的核心价值，流水线可以通过ShareLibrary的方式来扩展。\npipeline定义 关于Jenkins流水线的运行我们可以抽象一下，例如：可以把流水线(pipeline)想象成13号线地铁，把流水线的阶段(stage)想象成地铁的每一个站点，把流水线脚本(jenkinsfile)想象成地铁线路图。这就是流水线的多样性，每条线路都有不同的站点。\n现在地铁（Jenkins）已经有了，我们需要设计地铁的运行线路图（Jenkinsfile），在线路图中指定要经过的站点（stages）。这下你是否已经知道我们要运行一条流水线，需要先做什么呢？ \u0026ndash;编写jenkinsfile\nPipeline\n Jenkins的Pipeline通过Jenkinsfile进行描述（类似于Dockerfile） Jenkinsfile是Jenkins的特性（pipeline as code） Pipeline是Jenkins的核心功能，提供一组可扩展的工具。 通过Pipeline 的DSL语法可以完成从简单到复杂的交付流水线实现。  Jenkinsfile\n Jenkinsfile使用两种语法进行编写，分别是声明式和脚本式。 声明式和脚本式的流水线从根本上是不同的。 声明式是jenkins流水线更友好的特性。 脚本式的流水线语法，提供更丰富的语法特性。 声明式流水线使编写和读取流水线代码更容易设计。  pipeline演示 来我们一起看下这里的配置，看下Jenkinsfile的组成及每个部分的功能含义。\n 使用agent{}，指定node节点/workspace（定义好此流水线在某节点运行） 指定options{}运行选项（定义好此流水线运行时的一些选项，例如输出日志的时间） 指定stages{}（stages包含多个stage，stage包含steps。是流水线的每个步骤) 指定post{}（定义好此流水线运行成功或者失败后，根据状态做一些任务）\npipeline{ //指定运行此流水线的节点 agent { node { label \u0026quot;build\u0026quot;}} //流水线的阶段 stages{ //阶段1 获取代码 stage(\u0026quot;CheckOut\u0026quot;){ steps{ script{ println(\u0026quot;获取代码\u0026quot;) } } } stage(\u0026quot;Build\u0026quot;){ steps{ script{ println(\u0026quot;运行构建\u0026quot;) } } } } post { always{ script{ println(\u0026quot;流水线结束后，经常做的事情\u0026quot;) } } success{ script{ println(\u0026quot;流水线成功后，要做的事情\u0026quot;) } } failure{ script{ println(\u0026quot;流水线失败后，要做的事情\u0026quot;) } } aborted{ script{ println(\u0026quot;流水线取消后，要做的事情\u0026quot;) } } } }   验证流水线效果 查看Jenkins构建日志（正确效果） 通过BlueOcean查看（如果没有BlueOcean图标，需要自行在插件中心安装插件） 到此一个简单的Jenkinfile完成了！ 后面我们来详细分析每个步骤的作用。\n"
},
{
	"uri": "/pipelineintegrated/",
	"title": "流水线集成篇",
	"tags": [],
	"description": "",
	"content": " Chapter 3 流水线集成篇 😺您好，本模块主要讲解Jenkins如何与其他工具链系统集成， 注意不会讲解太多关于外围系统的知识，如需了解更多可以查阅外围系统的官方文档！\n    章节名称 章节内容     3-1 构建发布工具集成 本章我们将学习Jenkins与常用的构建发布工具集成   3-2 用户认证系统集成 本章我们将为大家讲述用用户认证系统集成   3-3 版本控制系统集成 本章我们将学习Jenkins与版本控制系统集成   3-4 质量管理平台集成 本章主要讲述Jenkins与质量管理平台集成   3-5 制品仓库集成 本章我们主要讲述Jenkins与制品库集成   3-6 需求管理平台集成 本章我们主要讲述Jenkins与需求管理平台集成   3-7 容器PaaS平台集成 本章我们主要讲述Jenkins与与容器PaaS平台集成   3-8 自动化接口测试 本章我们主要讲述Jenkins完成自动化接口测试    FAQ Q1什么是集成？ 所谓的集成是通过Jenkins与外部系统或工具之间的调用，而不是Jenkins本身具备其他外围系统的功能。例如：与maven集成，我们不能去认为Jenkins自身已经具有maven打包构建的功能，而是jenkins调用maven去进行打包构建！ 所以打包出现的问题未必一定是Jenkins的问题，80%因为代码无法完成编译等步骤导致的。\n"
},
{
	"uri": "/basics/userandpermissions/",
	"title": "Jenkins用户与权限管理",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们将指导大家在Jenkins中如何管理用户及用户权限 😀\n 目录  用户管理\n 查看用户 新建用户 删除用户 更新用户  权限管理\n 管理权限 全局权限 项目权限 权限授权   Jenkins默认使用的是自带的数据库管理用户，支持同步LDAP、Github等认证集成。关于用户与权限管理是Jenkins比较弱的一点，当大规模授权的时候建议使用API接口授权，否则当你打开web页面授权时，会很乱加载缓慢，最终导致保存失败权限丢失。\n用户管理  配置用户接入入口: 系统管理-\u0026gt;全局安全配置。 默认使用的是Jenkins数据库存储。 可以选择集成LDAP服务或者是GItlab服务（需要安装插件后才能使用，后面会讲解）。  查看用户 以使用Jenkins专有数据库为例，用户管理入口: 系统管理-\u0026gt; 管理用户\n新建用户 删除用户 更新用户 权限管理  注意安装插件: 权限默认使用 Role-Based Strategy,其他方式如图所示。\n 管理权限  系统设置-\u0026gt;Manage and Assign Roles-\u0026gt;Manage Roles Global roles：添加用户和用户组，分配某个用户属于哪个用户组。 Project roles：添加某个工程或某一组工程的用户或用户组 Slave roles：添加某个节点或某一组节点的用户或用户组  全局权限 项目权限 权限授权 "
},
{
	"uri": "/pipelineintegrated/chapter02/",
	"title": "3-2 用户认证系统集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章主要讲解与jenkins与用户认证系统集成 例如：LDAP Gitlab GitHub 。我们做实验的过程中建议先开启匿名模式，防止配置错误导致无法直接登录。 😀\n 目录  ldap系统集成 gitlab单点登录  gitlab配置 jenkins配置  github单点登录  github配置 配置jenkins   Jenkins默认使用自带数据库模式存储用户，在企业中一般都会有统一的认证中心，例如 LDAP、ActiveDirectory中管理用户。可以配置Jenkins集成实现统一用户管理。\nldap系统集成 LDAP系统是用于用户管理，在配置集成的时候我们只需要以下信息：\n 服务器地址： ldap://192.168.1.200 服务器端口: 389 组织OU: ou=jenkins,dc=devops,dc=com 管理员账号和密码: cn=admin,dc=devops,dc=com  首先，我需要在Jenkins系统中安装LDAP插件，然后进入 系统管理 -\u0026gt; 全局安全配置页面中。\n填写好信息之后，我们可以点击测试按钮进行测试。会模拟用户登录，成功后再保存配置即可。\ngitlab单点登录 一般我们会配置Gitlab系统与LDAP系统做用户认证集成，开发人员登录gitlab系统的频率还是很多的，今天我们的配置效果是：当用户已经登录了gitlab，再次打开Jenkins会自动登入。\ngitlab配置 首先，我们需要在Gitlab中添加一个应用。系统设置 -\u0026gt; 应用管理\n填写Jenkins回调地址http://jenkinsserver:8080/securityRealm/finishLogin,勾选权限默认具有read_user权限即可。\n保存配置，会提示以下信息，这些信息需要填写到Jenkins中。ApplicationId secret jenkins配置 我们需要在Jenkins系统中安装插件Gitlab Authentication， 然后导航到全局安全配置。 填写Gitlab系统地址和上面在Gitlab创建的应用的ApplicationId secret。  注意：当Jenkins前面有代理的时候可能会出现跳转错误的问题。这时候需要看下提示错误的redirect URL地址,检查下图配置。 如果下图配置没有问题，请检查代理的配置问题。另外要注意是http模式哦\n github单点登录 如果你用过GitLab，你会发现与GitHub很类似。这里我们要配置的GitHub集成与GitLab配置很类似。\ngithub配置 首先登录GitHub, settings -\u0026gt; Developer Settings -\u0026gt; Oauth Apps。 新建应用：填写Jenkins回调地址http://jenkinsserver:8080/securityRealm/finishLogin。 保存，获取应用ID和secret 配置jenkins 我们需要在Jenkins系统中安装插件Github Authentication， 然后导航到全局安全配置。 填写Gitlab系统地址和上面在Gitlab创建的应用的ApplicationId secret。\n效果： "
},
{
	"uri": "/pipelinesyntax/chapter02/",
	"title": "Jenkins流水线语法",
	"tags": [],
	"description": "",
	"content": " 您好，本模块主要学习声明式流水线的核心语法，掌握核心语法便于编写Jenkinsfile 😀\n 目录  声明式流水线 agent代理 post运行后处理 stages阶段 environment环境变量 options运行选项 parameters参数 trigger触发器 tool构建工具 input交互输入 when条件判断 parallel并行 script脚本标签  声明式流水线 声明式Pipleine是官方推荐的语法，声明式语法更加简洁。所有的声明式Pipeline都必须包含一个 pipeline块中，比如：\npipeline { //run }  在声明式Pipeline中的基本语句和表达式遵循Groovy的语法。但是有以下例外：\n 流水线顶层必须是一个块，特别是pipeline{}。 不需要分号作为分割符，是按照行分割的。 语句块只能由阶段、指令、步骤、赋值语句组成。例如: input被视为input()。  agent代理 agent指定了流水线的执行节点。\nagent { node { label 'labelname' }} aget { label ' labelname '}  参数：\n any 在任何可用的节点上执行pipeline。none 没有指定agent的时候默认。 label 在指定标签上的节点上运行Pipeline。 node 允许额外的选项(自定义workspace)。  post运行后处理 当流水线完成后根据完成的状态做一些任务。例如：构建失败后邮件通知\npost { always { echo 'I will always say Hello again!' } failure{ email : xxxx@dxx.com } }  常用的状态：\n always 无论流水线或者阶段的完成状态。 changed 只有当流水线或者阶段完成状态与之前不同时。 failure 只有当流水线或者阶段状态为\u0026rdquo;failure\u0026rdquo;运行。 success 只有当流水线或者阶段状态为\u0026rdquo;success\u0026rdquo;运行。 unstable 只有当流水线或者阶段状态为\u0026rdquo;unstable\u0026rdquo;运行。例如：测试失败。 aborted 只有当流水线或者阶段状态为\u0026rdquo;aborted \u0026ldquo;运行。例如：手动取消。  stages阶段 stages是流水线的整个运行阶段，包含一个或多个 stage , 建议 stages 至少包含一个 stage。\nstages { stage('Example') { steps { echo 'Hello World' } } }  environment环境变量 定义流水线环境变量，可以定义在全局变量或者步骤中的局部变量。这取决于 environment 指令在流水线内的位置。\nagent any //全局变量 environment { activeEnv = 'dev' } stages { stage('Example') { //局部变量 environment { AN_ACCESS_KEY = credentials('my-prefined-secret-text') } steps { sh 'printenv' } } }  options运行选项 定义流水线运行时的配置选项，流水线提供了许多选项, 比如buildDiscarder,但也可以由插件提供, 比如 timestamps。\nagent any options { timeout(time: 1, unit: 'HOURS') } stages { stage('Example') { steps { echo 'Hello World' } } }  其他部分参数：\n buildDiscarder: 为最近的流水线运行的特定数量保存组件和控制台输出。 disableConcurrentBuilds: 不允许同时执行流水线。 可被用来防止同时访问共享资源等。 overrideIndexTriggers: 允许覆盖分支索引触发器的默认处理。 skipDefaultCheckout: 在agent 指令中，跳过从源代码控制中检出代码的默认情况。 skipStagesAfterUnstable: 一旦构建状态变得UNSTABLE，跳过该阶段。 checkoutToSubdirectory: 在工作空间的子目录中自动地执行源代码控制检出。 timeout: 设置流水线运行的超时时间, 在此之后，Jenkins将中止流水线。 retry: 在失败时, 重新尝试整个流水线的指定次数。 timestamps 预测所有由流水线生成的控制台输出，与该流水线发出的时间一致。  parameters参数 为流水线运行时设置项目相关的参数，就不用在UI界面上定义了，比较方便。\n//string 字符串类型的参数, 例如: parameters { string(name: 'DEPLOY_ENV', defaultValue: 'staging', description: '') } //booleanParam 布尔参数, 例如: parameters { booleanParam(name: 'DEBUG_BUILD', defaultValue: true, description: '') }  agent any parameters { string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?') } stages { stage('Example') { steps { echo \u0026quot;Hello ${params.PERSON}\u0026quot; } } }  trigger触发器 构建触发器\n//cron 计划任务定期执行构建。 triggers { cron('H */4 * * 1-5') } //pollSCM 与cron定义类似，但是由jenkins定期检测源码变化。 triggers { pollSCM('H */4 * * 1-5') } agent any triggers { cron('H */4 * * 1-5') } stages { stage('Example') { steps { echo 'Hello World' } } }  tool构建工具 构建工具maven、ant、gradle,获取通过自动安装或手动放置工具的环境变量。支持maven/jdk/gradle。工具的名称必须在系统设置-\u0026gt;全局工具配置中定义。\nagent any tools { maven 'apache-maven-3.0.1' } stages { stage('Example') { steps { sh 'mvn --version' } } }  input交互输入 input用户在执行各个阶段的时候，由人工确认是否继续进行。\nagent any stages { stage('Example') { input { message \u0026quot;Should we continue?\u0026quot; ok \u0026quot;Yes, we should.\u0026quot; submitter \u0026quot;alice,bob\u0026quot; parameters { string(name: 'PERSON', defaultValue: 'Mr Jenkins', description: 'Who should I say hello to?') } } steps { echo \u0026quot;Hello, ${PERSON}, nice to meet you.\u0026quot; } } }  参数解释：\n message 呈现给用户的提示信息。 id 可选，默认为stage名称。 ok 默认表单上的ok文本。 submitter 可选的,以逗号分隔的用户列表或允许提交的外部组名。默认允许任何用户。 submitterParameter 环境变量的可选名称。如果存在，用submitter 名称设置。 parameters 提示提交者提供的一个可选的参数列表。  when条件判断 when 指令允许流水线根据给定的条件决定是否应该执行阶段。 when 指令必须包含至少一个条件。\n//branch: 当正在构建的分支与模式给定的分支匹配时，执行这个阶段,这只适用于多分支流水线例如: when { branch 'master' } //environment: 当指定的环境变量是给定的值时，执行这个步骤,例如: when { environment name: 'DEPLOY_TO', value: 'production' } //expression 当指定的Groovy表达式评估为true时，执行这个阶段, 例如: when { expression { return params.DEBUG_BUILD } } //not 当嵌套条件是错误时，执行这个阶段,必须包含一个条件，例如: when { not { branch 'master' } } //allOf 当所有的嵌套条件都正确时，执行这个阶段,必须包含至少一个条件，例如: when { allOf { branch 'master'; environment name: 'DEPLOY_TO', value: 'production' } } //anyOf 当至少有一个嵌套条件为真时，执行这个阶段,必须包含至少一个条件，例如: when { anyOf { branch 'master'; branch 'staging' } } stage('Example Deploy') { when { branch 'production' environment name: 'DEPLOY_TO', value: 'production' } steps { echo 'Deploying' } }  parallel并行 声明式流水线的阶段可以在他们内部声明多隔嵌套阶段, 它们将并行执行。 注意，一个阶段必须只有一个 steps 或 parallel的阶段。 嵌套阶段本身不能包含 进一步的 parallel 阶段, 但是其他的阶段的行为与任何其他 stageparallel 的阶段不能包含 agent 或 tools阶段, 因为他们没有相关 steps。\n stage('Parallel Stage') { when { branch 'master' } failFast true parallel { stage('Branch A') { agent { label \u0026quot;for-branch-a\u0026quot; } steps { echo \u0026quot;On Branch A\u0026quot; } } stage('Branch B') { agent { label \u0026quot;for-branch-b\u0026quot; } steps { echo \u0026quot;On Branch B\u0026quot; } } } }  failFast true 当其中一个进程失败时，强制所有的 parallel 阶段都被终止。\nscript脚本标签 可以通过此标签嵌入脚本式语法。\nstage(\u0026quot;Build\u0026quot;){ steps{ script{ println(\u0026quot;运行构建\u0026quot;) } } }  "
},
{
	"uri": "/pipelinestack/",
	"title": "流水线实践篇[待更新]",
	"tags": [],
	"description": "",
	"content": " Chapter 4 流水线实践篇 "
},
{
	"uri": "/cont/menushortcuts/",
	"title": "Menu extra shortcuts",
	"tags": [],
	"description": "",
	"content": " You can define additional menu entries or shortcuts in the navigation menu without any link to content.\nBasic configuration Edit the website configuration config.toml and add a [[menu.shortcuts]] entry for each link your want to add.\nExample from the current website:\n[[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Github repo\u0026quot; identifier = \u0026quot;ds\u0026quot; url = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot; weight = 10 [[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Showcases\u0026quot; url = \u0026quot;/showcase\u0026quot; weight = 11 [[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Hugo Documentation\u0026quot; identifier = \u0026quot;hugodoc\u0026quot; url = \u0026quot;https://gohugo.io/\u0026quot; weight = 20 [[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Credits\u0026quot; url = \u0026quot;/credits\u0026quot; weight = 30  By default, shortcuts are preceded by a title. This title can be disabled by setting disableShortcutsTitle=true. However, if you want to keep the title but change its value, it can be overriden by changing your local i18n translation string configuration.\nFor example, in your local i18n/en.toml file, add the following content\n[Shortcuts-Title] other = \u0026quot;\u0026lt;Your value\u0026gt;\u0026quot;  Read more about hugo menu and hugo i18n translation strings\nConfiguration for Multilingual mode When using a multilingual website, you can set different menus for each language. In the config.toml file, prefix your menu configuration by Languages.\u0026lt;language-id\u0026gt;.\nExample from the current website:\n[Languages] [Languages.en] title = \u0026quot;Documentation for Hugo Learn Theme\u0026quot; weight = 1 languageName = \u0026quot;English\u0026quot; [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Github repo\u0026quot; identifier = \u0026quot;ds\u0026quot; url = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot; weight = 10 [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Showcases\u0026quot; url = \u0026quot;/showcase\u0026quot; weight = 11 [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Hugo Documentation\u0026quot; identifier = \u0026quot;hugodoc\u0026quot; url = \u0026quot;https://gohugo.io/\u0026quot; weight = 20 [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Credits\u0026quot; url = \u0026quot;/credits\u0026quot; weight = 30 [Languages.fr] title = \u0026quot;Documentation du thème Hugo Learn\u0026quot; weight = 2 languageName = \u0026quot;Français\u0026quot; [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Repo Github\u0026quot; identifier = \u0026quot;ds\u0026quot; url = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot; weight = 10 [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Vitrine\u0026quot; url = \u0026quot;/showcase\u0026quot; weight = 11 [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Documentation Hugo\u0026quot; identifier = \u0026quot;hugodoc\u0026quot; url = \u0026quot;https://gohugo.io/\u0026quot; weight = 20 [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Crédits\u0026quot; url = \u0026quot;/credits\u0026quot; weight = 30  Read more about hugo menu and hugo multilingual menus\n"
},
{
	"uri": "/cont/menushortcuts.fr/",
	"title": "Raccourcis du menu",
	"tags": [],
	"description": "",
	"content": " Vous pouvez définir des entrées ou raccourcis supplémentaires dans le menu sans avoir besoin d\u0026rsquo;être lié à un contenu du site.\nConfiguration simple Editez le fichier de configuration config.toml et ajoutez une entrée [[menu.shortcuts]] pour chaque lien que vous voulez ajouter.\nExemple pour ce site:\n[[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Github repo\u0026quot; identifier = \u0026quot;ds\u0026quot; url = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot; weight = 10 [[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Showcases\u0026quot; url = \u0026quot;/showcase\u0026quot; weight = 11 [[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Hugo Documentation\u0026quot; identifier = \u0026quot;hugodoc\u0026quot; url = \u0026quot;https://gohugo.io/\u0026quot; weight = 20 [[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Credits\u0026quot; url = \u0026quot;/credits\u0026quot; weight = 30  Par défaut, les raccourcis sont précédés par un titre. Ce titre peut être désactivé en ajouter le paramètre disableShortcutsTitle=true dans la section params de votre config.toml. Cependant, si vous voulez garder le titre mais changer sa valeur, vous pouvez modifier votre configuration multilangue locale en changeant les translation string.\nPar exemple, dans votre fichier local i18n/en.toml, ajouter le contenu\n[Shortcuts-Title] other = \u0026quot;\u0026lt;Votre valeur\u0026gt;\u0026quot;  Plus d\u0026rsquo;infos sur les menus Hugo et sur les translations strings\nConfiguration pour le mode multi-langue Quand vous utilisez un site multi-langue, vous pouvez avoir des menus différents pour chaque langage. Dans le fichier de configuration config.toml, préfixez votre configuration par Languages.\u0026lt;language-id\u0026gt;.\nPar exemple, avec ce site :\n[Languages] [Languages.en] title = \u0026quot;Documentation for Hugo Learn Theme\u0026quot; weight = 1 languageName = \u0026quot;English\u0026quot; [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Github repo\u0026quot; identifier = \u0026quot;ds\u0026quot; url = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot; weight = 10 [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Showcases\u0026quot; url = \u0026quot;/showcase\u0026quot; weight = 11 [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Hugo Documentation\u0026quot; identifier = \u0026quot;hugodoc\u0026quot; url = \u0026quot;https://gohugo.io/\u0026quot; weight = 20 [[Languages.en.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Credits\u0026quot; url = \u0026quot;/credits\u0026quot; weight = 30 [Languages.fr] title = \u0026quot;Documentation du thème Hugo Learn\u0026quot; weight = 2 languageName = \u0026quot;Français\u0026quot; [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fab fa-github'\u0026gt;\u0026lt;/i\u0026gt; Repo Github\u0026quot; identifier = \u0026quot;ds\u0026quot; url = \u0026quot;https://github.com/matcornic/hugo-theme-learn\u0026quot; weight = 10 [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-camera'\u0026gt;\u0026lt;/i\u0026gt; Vitrine\u0026quot; url = \u0026quot;/showcase\u0026quot; weight = 11 [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bookmark'\u0026gt;\u0026lt;/i\u0026gt; Documentation Hugo\u0026quot; identifier = \u0026quot;hugodoc\u0026quot; url = \u0026quot;https://gohugo.io/\u0026quot; weight = 20 [[Languages.fr.menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-bullhorn'\u0026gt;\u0026lt;/i\u0026gt; Crédits\u0026quot; url = \u0026quot;/credits\u0026quot; weight = 30  Plus d\u0026rsquo;infos sur les menus Hugo et les menus multi-langue Hugo\n"
},
{
	"uri": "/pipelineintegrated/chapter03/",
	"title": "3-3 版本控制系统集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章主要我们主要学习与版本控制系统Gitlab的集成，例如：配置提交流水线和合并流水线。\n 目录  提交流水线  配置jenkins 配置gitlab  提交流水线优化  分支名称自动替换 增加构建描述信息 变更commit状态 构建失败邮件通知 过滤特殊push请求  合并流水线  提交流水线 当Gitlab中触发push操作，则触发相对应的Jenkins流水线构建。实现快速反馈与验证。\n 方式1： 使用Gitlab CI,当有push请求，在CI脚本中远程触发Jenkins项目构建。  需要准备Gitlab runner 编写触发Jenkins脚本  方式2： 使用Gitlab WebHook,当有push请求，直接触发jenkins项目构建。【采用】  需要配置Gitlab webHook 需要配置Jenkins项目Hook   配置jenkins 首先我们准备一个能够构建成功的流水线项目（暂且不设置复杂的步骤，helloworld即可） 编辑项目配置: 我们要使用Generic Webhook Trigger触发器，需要安装插件。这触发器非常灵活，推荐使用。\n开启Generic Webhook Trigger触发器，添加一个请求参数runOpts Request parameters 。我们定义这个参数是为了对构建做个标识。辨别手动触发构建与提交构建。配置一个token默认我使用的是项目的名称，必须唯一，否则在配置了相同的token的项目都会被触发。Print post content用于展示请求日志,Print contributed variables展示我们在post中获取的变量内容。\n配置完成后： 我们生成一个触发URL\nhttp://JENKINS_URL/generic-webhook-trigger/invoke?token=demo-maven-service_PUSH\u0026amp;runOpts=GitlabCI\n配置gitlab 我们找到要配置提交触发构建的项目,设置-\u0026gt;集成,勾选Push Events 配置完成，这时候我们进行提交代码，会发现已经能够正常触发项目构建了。如果出现了问题，我们重点检查jenkins的项目触发URL和网络权限问题。\n 提交流水线优化 分支名称自动替换 当我们在任意分支提交的时候，Jenkins需要获取我们提交的分支进行构建。而不是固定的分支。\n增加获取hook参数 分支名称变量 Post content parameters. $指的是在Gitlab系统中push操作触发后发送给Jenkins的数据。（这个数据包含谁提交的、提交的分支、提交的id等信息）。而$.ref是解析这个json格式的数据，获取其中的ref也就是提交的分支名称。 查看下面这段jenkinsfile,你会发现branch变量就是上面我们在触发器中配置的，它的原始内容是refs/heads/master，因为我们在下载代码的时候不需要前面refs/heads/内容，所以去掉了。此时可以重复在不通的分支提交代码，当在构建日志中出现了不通的分支名称，则成功了。\nbranchName = branch - \u0026quot;refs/heads/\u0026quot; //pipeline pipeline{ agent { node { label \u0026quot;build\u0026quot;}} stages{ stage(\u0026quot;CheckOut\u0026quot;){ steps{ script{ println(\u0026quot;${branchName}\u0026quot;) } } } } }  增加构建描述信息 别忘了我们在前面构建触发器中配置了runOpts参数，这个参数我们用于区分不通的构建触发方式（手动、提交触发）。 这时候我们可以结合currendBuild.description配置。\n为了更加明显我们可以在触发器中再添加一个参数，用户获取提交的用户。\n然后我们来完善一下上面的Jenkinsfile，如下：\nbranchName = branch - \u0026quot;refs/heads/\u0026quot; currentBuild.description = \u0026quot;Trigger by ${userName} ${branch}\u0026quot; //pipeline pipeline{ agent { node { label \u0026quot;build\u0026quot;}} stages{ stage(\u0026quot;CheckOut\u0026quot;){ steps{ script{ println(\u0026quot;${branchName}\u0026quot;) } } } } }  改好了之后，我们可以进行调试了。当你在项目的构建记录中看到下图信息，表名成功了。\n变更commit状态 其实，Gitlab自身的GitlabCI很好用，能够根据流水线的状态设置当前提交的状态。而我们使用Jenkins也是可以完成这样的配置。这个需要我们去研究Gitlab的API。先看下效果吧！ 开始配置： 需要研究Gitlab的Pipeline接口文档 关于gitlab中pipeline的状态有：[pending, running, success, failed, canceled] 。 接口地址为projects/${projectId}/statuses/${commitSha}?state=state。\n搞清楚了上面这些，我们在共享库中进行封装就很简单了。 开始吧！可以看到我们还需要一些信息例如：projectIdgitlab项目的ID,commitSha提交的id。我们该如何获取呢？ 对的，没错我们根据上面的操作一样获取。 首先在触发器添加两个参数projectId,commitSha，分别对应项目Id和提交Id。 $.project.id,$.checkout_sha ok！很好，我们接下来在共享库创建一个文件src/org/devops/gitlab.groovy,这个文件用与后续的Gitlab操作。然后我们在jenkins中添加一个凭据用户存储Gitlab的token，这里我定义的凭据名称是gitlab-token 。我们首先使用httpRequest封装请求Gitlab的API地址，然后使用withCredentials获取Jenkins中的凭据gitlab-token赋值给变量gitlabToken用于认证使用。\npackage org.devops //封装HTTP请求 def HttpReq(reqType,reqUrl,reqBody){ def gitServer = \u0026quot;http://192.168.1.200:30088/api/v4\u0026quot; withCredentials([string(credentialsId: 'gitlab-token', variable: 'gitlabToken')]) { result = httpRequest customHeaders: [[maskValue: true, name: 'PRIVATE-TOKEN', value: \u0026quot;${gitlabToken}\u0026quot;]], httpMode: reqType, contentType: \u0026quot;APPLICATION_JSON\u0026quot;, consoleLogResponseBody: true, ignoreSslErrors: true, requestBody: reqBody, url: \u0026quot;${gitServer}/${reqUrl}\u0026quot; //quiet: true } return result }  如果上面的内容你有点看不懂了，嘿嘿，先放放。你可以去了解下关于HTTP请求相关基础知识了。\n 我们开始添加变更提交状态的方法(记住我们现在还在gitlab.groovy文件中哦)，我们定义一个ChangeCommitStatus()方法，具有三个参数分别为项目ID、提交ID、提交状态 projectId，commitSha,status。然后使用我们上面封装好的方法发送POST请求。\n//更改提交状态 def ChangeCommitStatus(projectId,commitSha,status){ commitApi = \u0026quot;projects/${projectId}/statuses/${commitSha}?state=${status}\u0026quot; response = HttpReq('POST',commitApi,'') println(response) return response }  到此我们在共享库的配置就完成了，接下来在Jenkinsfile中引用并进行调试。首先我们先加载了共享库jenkinslibrary 然后引用了gitlab.groovy。当流水线开始运行的时候我们将当前这次提交的状态为running运行中状态，当流水线构建成功我们会把状态变为success，当流水线失败了或者被取消了我们会将状态变为failed，canceled。\n#!groovy @Library('jenkinslibrary@master') _ //func from shareibrary def gitlab = new org.devops.gitlab() //branch branchName = branch - \u0026quot;refs/heads/\u0026quot; currentBuild.description = \u0026quot;Trigger by ${userName} ${branch}\u0026quot; gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;running\u0026quot;) //pipeline pipeline{ agent { node { label \u0026quot;build\u0026quot;}} stages{ stage(\u0026quot;CheckOut\u0026quot;){ steps{ script{ println(\u0026quot;${branchName}\u0026quot;) } } } } post { always{ script{ println(\u0026quot;always\u0026quot;) } } success{ script{ println(\u0026quot;success\u0026quot;) gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;success\u0026quot;) } } failure{ script{ println(\u0026quot;failure\u0026quot;) gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;failed\u0026quot;) } } aborted{ script{ println(\u0026quot;aborted\u0026quot;) gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;canceled\u0026quot;) } } } }  如果调试没有问题，那么此时你可以登录gitlab系统当前项目的分支的提交的状态了！但是你是否觉得还差点什么？ 如果开发人员提交了，然后流水线自动执行了，最后失败了怎么办？ 要求开发人员放下工作实时去看？我觉得发送一个通知会更好一些！ 例如邮件通知。好吧，开始配置！\n构建失败邮件通知 首先要为每个开发人员分配一个邮箱，并且要在Gitlab中填写好。登录个人用户进行配置哦！没错，在这里配置邮箱的意义就是方便后面我们在jenkins中过滤获取。当然如果公司邮箱具有特征：用户名@xxx.com。就不用配置了因为前面已经获取的用户名。当然很多时候不是这样的，所以我们有必要把这个配置好。\n配置好邮箱之后，我们需要在Jenkins中配置邮件通知和项目配置。我们在项目中触发器添加一个参数userEmail。\nJenkins需要配置邮件通知，安装插件Email Extension，然后进入系统管理-\u0026gt; 系统设置 -\u0026gt;Extended E-email Notification。这里我使用的是QQ邮箱，填写SMTP服务器地址smtp.qq.com 和端口 465注意要开启SSL，密码为授权码。\n邮件通知的功能很重要，我们要为每条流水线都加上这个步骤，我们在共享库中封装一个toemail.groovy。 新建文件src/org/devops/toemail.groovy。在这个文件中，我们写了一段HTML代码，主要展示Jenkins的构建信息。\npackage org.devops //定义邮件内容 def Email(status,emailUser){ emailext body: \u0026quot;\u0026quot;\u0026quot; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body leftmargin=\u0026quot;8\u0026quot; marginwidth=\u0026quot;0\u0026quot; topmargin=\u0026quot;8\u0026quot; marginheight=\u0026quot;4\u0026quot; offset=\u0026quot;0\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;http://192.168.1.200:8080/static/0eef74bf/images/headshot.png\u0026quot;\u0026gt; \u0026lt;table width=\u0026quot;95%\u0026quot; cellpadding=\u0026quot;0\u0026quot; cellspacing=\u0026quot;0\u0026quot; style=\u0026quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif\u0026quot;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;\u0026lt;br /\u0026gt; \u0026lt;b\u0026gt;\u0026lt;font color=\u0026quot;#0B610B\u0026quot;\u0026gt;构建信息\u0026lt;/font\u0026gt;\u0026lt;/b\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;项目名称：${JOB_NAME}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;构建编号：${BUILD_ID}\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;构建状态: ${status} \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;项目地址：\u0026lt;a href=\u0026quot;${BUILD_URL}\u0026quot;\u0026gt;${BUILD_URL}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;构建日志：\u0026lt;a href=\u0026quot;${BUILD_URL}console\u0026quot;\u0026gt;${BUILD_URL}console\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; \u0026quot;\u0026quot;\u0026quot;, subject: \u0026quot;Jenkins-${JOB_NAME}项目构建信息 \u0026quot;, to: emailUser }  在流水线中引用\n#!groovy @Library('jenkinslibrary@master') _ //func from shareibrary def gitlab = new org.devops.gitlab() def toemail = new org.devops.toemail() //branch branchName = branch - \u0026quot;refs/heads/\u0026quot; currentBuild.description = \u0026quot;Trigger by ${userName} ${branch}\u0026quot; gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;running\u0026quot;) //pipeline pipeline{ agent { node { label \u0026quot;build\u0026quot;}} stages{ stage(\u0026quot;CheckOut\u0026quot;){ steps{ script{ println(\u0026quot;${branchName}\u0026quot;) } } } } post { always{ script{ println(\u0026quot;always\u0026quot;) } } success{ script{ println(\u0026quot;success\u0026quot;) gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;success\u0026quot;) toemail.Email(\u0026quot;流水线成功\u0026quot;,userEmail) } } failure{ script{ println(\u0026quot;failure\u0026quot;) gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;failed\u0026quot;) toemail.Email(\u0026quot;流水线失败了！\u0026quot;,userEmail) } } aborted{ script{ println(\u0026quot;aborted\u0026quot;) gitlab.ChangeCommitStatus(projectId,commitSha,\u0026quot;canceled\u0026quot;) toemail.Email(\u0026quot;流水线被取消了！\u0026quot;,userEmail) } } } }  接下来可以调试了，如果没有问题会在邮箱中看到此封邮件。 过滤特殊push请求 你可能发现问题了，新建一个分支或者标签也会出现构建，这个构建是没有意义的。我们需要排除掉。没错，jenkins 的 Generic webHook 也是支持的。\n参考官方的说明:https://github.com/jenkinsci/generic-webhook-trigger-plugin/tree/master/src/test/resources/org/jenkinsci/plugins/gwt/bdd\n添加三个变量，获取当前的提交信息 $object_kind $before $after 通过正则表达式配置触发条件：Expression ^push\\s(?!0{40}).{40}\\s(?!0{40}).{40}$ Text $object_kind $before $after。 push请求只有after和before的值都不是40个0的时候触发构建（为40个0的情况是删除分支或者新建分支）\nOk! 提交流水线配置好了，可以玩耍了~。\n合并流水线 关于合并流水线的配置之前要把提交流水线配置好，当提交流水线配置好了，合并流水线只需要修改一个配置。\n当流水线成功后才可以合并：会检查原分支中的最后一次提交的状态是否为success。\n当原分支最后一次提交的状态为success，则可以合并。 "
},
{
	"uri": "/pipelinesyntax/chapter03/",
	"title": "Jenkins共享库应用",
	"tags": [],
	"description": "",
	"content": " 您好，本模块主要学习Jenkins共享库的配置，目的是能够让大家编写更加灵活强大的流水线😀\n 目录  概述 共享库内容 创建共享库 使用共享库  概述 共享库这并不是一个全新的概念，其实具有编程能力的同学应该清楚一些。例如在编程语言Python中，我们可以将Python代码写到一个文件中，当代码数量增加，我们可以将代码打包成模块然后再以import的方式使用此模块中的方法。\n在Jenkins中使用Groovy语法，共享库中存储的每个文件都是一个groovy的类，每个文件（类）中包含一个或多个方法。每个方法包含groovy语句块。\n我把共享库代码上传到了github，大家可以参考demo共享库\n共享库内容 这是一个demo演示的共享库，大家可以看到仓库的结构与内容。这个仓库中包含了很多类，例如：我将kubernetes中的API方法封装在了kubernetes.groovy文件中，便于后面引用。在此你只需要知道共享库的结构 ，具体该如何创建共享库后面会讲述😀\n── docs │ └── README.mdREADME.md ├── src │ └── org │ └── devops │ └── tools.groovy └── vars  src目录主要存放我们要编写的groovy类，执行流水线时，此目录将添加到class_path中。 vars目录主要存放脚本文件，这些脚本文件在流水线中作为变量公开。 resources目录允许从外部库中使用步骤来加载相关联的非Groovy文件。\n创建共享库 新建文件src/org/devops/tools.groovy, 在此我将这个文件定义为扩展工具类，主要放一些扩展方法。\n例如：在构建日志中查看流水线详细日志会很乱，我们可以在日志中将重点步骤通过不同的颜色高亮显示，便于排错。 我们开始写这样的一个方法PrintMes(),包含两个参数，输出内容value和内容的颜色color。\n注意： 我们需要安装 插件AnsiColor，这样才能使用ansiColor()方法，可以在片段生成器查看更多的用法。\n package org.devops //格式化输出 def PrintMes(value,color){ colors = ['red' : \u0026quot;\\033[40;31m \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;${value}\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; \\033[0m\u0026quot;, 'blue' : \u0026quot;\\033[47;34m ${value} \\033[0m\u0026quot;, 'green' : \u0026quot;\u001b[1;32m\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;${value}\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u001b[m\u0026quot;, 'green1' : \u0026quot;\\033[40;32m \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;${value}\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; \\033[0m\u0026quot; ] ansiColor('xterm') { println(colors[color]) } }  使用共享库 我们导航到 系统配置 -\u0026gt; Global Pipeline Libraries\n首先，我们为共享库设置一个名称jenkinslib，注意这个名称后续在Jenkinsfile中引用。 再设置一个默认的版本，这里的版本是分支的名称。我默认配置的是master版本。 接下来我们配置共享库的仓库地址，我的仓库在github中，所以这里我填写的是github的方式。（如果你用的是gitlab可以使用gitlab方式或者git方式）。如果仓库是私有的方式，需要在jenkins的凭据中添加一个账号用于下载共享库。 好，到此共享库在Jenkins的配置就完成了，接下来测试在Jenkinsfile中引用。\n在Jenkinsfile中使用@Library('jenkinslib') _来加载共享库，注意后面符号_用于加载。 类的实例化def tools = new org.devops.tools(),使用类中的方法tools.PrintMes(\u0026quot;获取代码\u0026quot;,'green')。\n#!groovy @Library('jenkinslib') _ def tools = new org.devops.tools() pipeline { agent { node { label \u0026quot;master\u0026quot; }} stages { //下载代码 stage(\u0026quot;GetCode\u0026quot;){ steps{ timeout(time:5, unit:\u0026quot;MINUTES\u0026quot;){ script{ tools.PrintMes(\u0026quot;获取代码\u0026quot;,'green') } } } } } }  接下来在你的Jenkins上面运行一下吧，测试一下是否能够看到带有绿色的文字呢？\n"
},
{
	"uri": "/basics/credential/",
	"title": "Jenkins凭据管理",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们将指导大家如何管理Jenkins的凭据 😀 每个凭据会有一个唯一的ID，这个ID很重要，可以自定义也可以随机生成。（后续流水线中引用都是通过ID引用的）\n 目录  新建凭据 删除凭据 更新凭据 移动凭据 使用凭据  Jenkins的凭据有很多种类型，可以将一些敏感信息存储为凭据，然后在项目中引用。 凭据-\u0026gt; 系统-\u0026gt; 全局凭据  Username with password类型存储Harbor或者其他系统的用户名和密码。 GitLab API token类型存储Gitlab的用户API token。 Secret text类型可以用来存储OpenShift等系统中的token。 Certificate类型可以用户存储证书，例如k8s的用户证书。  新建凭据 选择需要创建的凭据的类型，然后输入账号和密码等信息。保存即可。\n删除凭据 当一些凭据已经不需要的时候，可以进行删除。 更新凭据 当用户名或者密码更改后，可以选择凭据进行修改。 移动凭据 目前移动凭据很少用，当存在多个阈的时候可以使用。\n使用凭据 我们可以在项目中增加一个凭据参数，用与项目构建中使用。 当我们使用pipeline类型的项目的时候，我们可以通过片段生成器生成流水线语法\n 选择要使用的凭据的类型  输入该凭据的账号的密码的变量名称（后续直接在流水线中使用此变量进行引用）  流水线代码\nwithCredentials([usernamePassword(credentialsId: '24982560-17fc-4589-819b-bc5bea89da77', passwordVariable: 'password', usernameVariable: 'username')]) { // some block sh \u0026quot;curl -u ${username}:${password} xxxxxxxxx\u0026quot; }   "
},
{
	"uri": "/pipelineextension/",
	"title": "流水线扩展篇[待更新]",
	"tags": [],
	"description": "",
	"content": " Chapter 5 流水线扩展篇 "
},
{
	"uri": "/cont/icons/",
	"title": "Icons and logos",
	"tags": [],
	"description": "",
	"content": " The Learn theme for Hugo loads the Font Awesome library, allowing you to easily display any icon or logo available in the Font Awesome free collection.\nFinding an icon Browse through the available icons in the Font Awesome Gallery. Notice that the free filter is enabled, as only the free icons are available by default.\nOnce on the Font Awesome page for a specific icon, for example the page for the heart, copy the HTML reference and paste into the markdown content.\nThe HTML to include the heart icon is:\n\u0026lt;i class=\u0026quot;fas fa-heart\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;  Including in markdown Paste the \u0026lt;i\u0026gt; HTML into markup and Font Awesome will load the relevant icon.\nBuilt with \u0026lt;i class=\u0026quot;fas fa-heart\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; from Grav and Hugo  Which appears as\nBuilt with  from Grav and Hugo\nCustomising icons Font Awesome provides many ways to modify the icon\n Change colour (by default the icon will inherit the parent colour) Increase or decrease size Rotate Combine with other icons  Check the full documentation on web fonts with CSS for more.\n"
},
{
	"uri": "/cont/i18n/",
	"title": "Multilingual and i18n",
	"tags": [],
	"description": "",
	"content": " Learn theme is fully compatible with Hugo multilingual mode.\nIt provides:\n Translation strings for default values (English and French). Feel free to contribute ! Automatic menu generation from multilingual content In-browser language switching  Basic configuration After learning how Hugo handle multilingual websites, define your languages in your config.toml file.\nFor example with current French and English website.\n# English is the default language defaultContentLanguage = \u0026quot;en\u0026quot; # Force to have /en/my-page and /fr/my-page routes, even for default language. defaultContentLanguageInSubdir= true [Languages] [Languages.en] title = \u0026quot;Documentation for Hugo Learn Theme\u0026quot; weight = 1 languageName = \u0026quot;English\u0026quot; [Languages.fr] title = \u0026quot;Documentation du thème Hugo Learn\u0026quot; weight = 2 languageName = \u0026quot;Français\u0026quot;  Then, for each new page, append the id of the language to the file.\n Single file my-page.md is split in two files:  in English: my-page.en.md in French: my-page.fr.md  Single file _index.md is split in two files:  in English: _index.en.md in French: _index.fr.md   Be aware that only translated pages are displayed in menu. It\u0026rsquo;s not replaced with default language content.\n Use slug Front Matter parameter to translate urls too.\n Overwrite translation strings Translations strings are used for common default values used in the theme (Edit this page button, Search placeholder and so on). Translations are available in french and english but you may use another language or want to override default values.\nTo override these values, create a new file in your local i18n folder i18n/\u0026lt;idlanguage\u0026gt;.toml and inspire yourself from the theme themes/hugo-theme-learn/i18n/en.toml\nBy the way, as these translations could be used by other people, please take the time to propose a translation by making a PR to the theme !\nDisable language switching Switching the language in the browser is a great feature, but for some reasons you may want to disable it.\nJust set disableLanguageSwitchingButton=true in your config.toml\n[params] # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = true  "
},
{
	"uri": "/pipelineintegrated/chapter04/",
	"title": "3-4 质量管理平台集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章主要我们主要学习与质量管理平台Sonarqube集成。\n 目录  认识sonarqube sonarqube配置管理 项目分析 自动化分析 sonarqube接口 配置多分支  认识sonarqube 架构  一台SonarQube Server启动3个主要过程：\n Web服务器，供开发人员，管理人员浏览高质量的快照并配置SonarQube实例 基于Elasticsearch的Search Server从UI进行后退搜索 Compute Engine服务器，负责处理代码分析报告并将其保存在SonarQube数据库中  一个SonarQube数据库要存储：\n SonarQube实例的配置（安全性，插件设置等） 项目，视图等的质量快照。  服务器上安装了多个SonarQube插件，可能包括语言，SCM，集成，身份验证和管理插件\n 在构建/持续集成服务器上运行一个或多个SonarScanner，以分析项目\n  工作原理 开发人员在IDE开发代码，可以安装SonarLint插件进行提交前代码扫描 当开发人员提交代码到版本控制系统中，自动触发jenkins进行代码扫描\n版本 开源社区版、开发版、企业版、数据中心版 安装 我们这里使用Docker运行一个测试的环境，可以参考博客安装 博文地址： https://www.cnblogs.com/mascot1/p/11179767.html\ndocker run --rm -d --name sonarqube \\ -p 9000:9000 \\ -v ${LOCALDIR}/sonar/sonarqube_conf:/opt/sonarqube/conf \\ -v ${LOCALDIR}/sonar/sonarqube_extensions:/opt/sonarqube/extensions \\ -v ${LOCALDIR}/sonar/sonarqube_logs:/opt/sonarqube/logs \\ -v ${LOCALDIR}/sonar/sonarqube_data:/opt/sonarqube/data \\ sonarqube:7.9.2-community  WEB 页面 http://127.0.0.1:9000\nsonarqube配置管理 强制登录 默认所有项目都可以公开的查看，在企业内肯定要配置成私有的。只有登录后才能查看。 ldap集成 安装LDAP插件 不用找了哦，页面上没有LDAP配置。需要修改sonar配置文件，然后重启服务器。\n#LDAP settings #admin sonar.security.realm=LDAP ldap.url=ldap://192.168.1.200:389 ldap.bindDn=cn=admin,dc=devops,dc=com ldap.bindPassword=ldap12344 #users ldap.user.baseDn=ou=jenkins,dc=devops,dc=com ldap.user.request=(\u0026amp;(objectClass=inetOrgPerson)(cn={login})) ldap.user.realNameAttribute=cn ldap.user.emailAttribute=mail  gitlab认证集成 安装GitlabAuth插件 在gitlab中创建一个应用 系统设置 应用管理，填写http://sonarserver:9000/oauth2/callback/gitlab\n接下来在sonarqube中配置gitlab信息。这个真的有图形页面，可以直接配置。主要填写gitlab的信息。\n登录时出现此选项表明成功了 github认证集成 安装GithubAuth插件 在github中创建一个应用 系统设置 应用管理，填写http://sonarserver:9000/oauth2/callback\n接下来在sonarqube中配置 最终效果 项目分析 安装配置sonarscanner 下载地址：https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner tar zxf sonar-scanner-xxxx.tar.gz -C /usr/local vim /etc/profile export SCANNER_HOME=/usr/local/sonar-scannerxxx export PATH=$PATH:$SCANNER_HOME/bin source /etc/profile  本地分析项目 sonar.projectKey 指定项目的关键字，sonar.host.url指定服务器地址（可以直接在配置文件中写死）,projectName指定项目的名称, projectVersion指定项目的版本(可以用构建时间和构建ID定义),login指定登录用户名,password指定登录用户密码, projectDescription指定项目的描述信息, links.homepage指定项目的主页（超链接）, sources指定扫描的目录, sourceEncoding指定扫描时的编码, java.binaries指定编译后的类文件目录(必填), java.test.binaries指定编译后的测试类目录,java.surefire.report指定测试报告目录。\nsonar-scanner -Dsonar.host.url=http://192.168.1.200:9000 \\ -Dsonar.projectKey=demo-maven-service \\ -Dsonar.projectName=demo-maven-service \\ -Dsonar.projectVersion=1.0 \\ -Dsonar.login=admin \\ -Dsonar.password=admin \\ -Dsonar.ws.timeout=30 \\ -Dsonar.projectDescription=\u0026quot;my first project!\u0026quot; \\ -Dsonar.links.homepage=http://www.baidu.com \\ -Dsonar.sources=src \\ -Dsonar.sourceEncoding=UTF-8 \\ -Dsonar.java.binaries=target/classes \\ -Dsonar.java.test.binaries=target/test-classes \\ -Dsonar.java.surefire.report=target/surefire-reports  自动化分析 在jenkins中安装插件sonarqube scanner 配置SonarQube服务器：登录Jenkins，然后转到“ 管理Jenkins”\u0026gt;“配置系统”。 向下滚动到SonarQube配置部分，单击Add SonarQube，然后添加提示您的值。 服务器身份验证令牌应创建为“机密文本”凭据。\n首先我们在共享库中定义一个sonarqube.groovy，用与扫描。新建文件src/org/devops/sonarqube.groovy 在这里我们定义了一个服务器列表,用于选择本次扫描使用的服务器（存在多个sonar的时候很有用处） 使用withSonarQubeEnv使用在Jenkins中配置sonar环境。这个方法有5个参数服务器类型、项目名称、项目描述、项目扫描路径、分支名称。\npackage org.devops //scan def SonarScan(sonarServer,projectName,projectDesc,projectPath,branchName){ //定义sonar服务器列表 def servers = [\u0026quot;test\u0026quot;:\u0026quot;sonarqube-test\u0026quot;,\u0026quot;prod\u0026quot;:\u0026quot;sonarqube-prod\u0026quot;] //使用sonar服务器 withSonarQubeEnv(\u0026quot;${servers[sonarServer]}\u0026quot;){ def scannerHome = \u0026quot;/home/jenkins/buildtools/sonar-scanner-3.2.0.1227-linux/\u0026quot; def sonarDate = sh returnStdout: true, script: 'date +%Y%m%d%H%M%S' sonarDate = sonarDate - \u0026quot;\\n\u0026quot; sh \u0026quot;\u0026quot;\u0026quot; ${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${projectName} \\ -Dsonar.projectName=${projectName} -Dsonar.projectVersion=${sonarDate} -Dsonar.ws.timeout=30 \\ -Dsonar.projectDescription=${projectDesc} -Dsonar.links.homepage=http://www.baidu.com \\ -Dsonar.sources=${projectPath} -Dsonar.sourceEncoding=UTF-8 -Dsonar.java.binaries=target/classes \\ -Dsonar.java.test.binaries=target/test-classes -Dsonar.java.surefire.report=target/surefire-reports -Dsonar.branch.name=${branchName} -X \u0026quot;\u0026quot;\u0026quot; } }  在Jenkinsfile中引用: 我们首先加载jenkinslibrary共享库，引用sonarqube.groovy。\n@Library('jenkinslibrary@master') _ //func from shareibrary def sonar = new org.devops.sonarqube() pipeline { agent any stages { stage(\u0026quot;codescan\u0026quot;){ steps{ script{ sonar.SonarScan(\u0026quot;test\u0026quot;,\u0026quot;${JOB_NAME}\u0026quot;,\u0026quot;${JOB_NAME}\u0026quot;,\u0026quot;src\u0026quot;) } } } } }  效果：此时流水线运行完成后，在项目中可以看到Sonarqube的链接。点击即可进入sonarqube 项目的扫描结果 sonarqube接口 根据sonar官方的文档获取接口使用详情。\n//查找项目 api/projects/search?projects=${projectName}\u0026quot; //创建项目 api/projects/create?name=${projectName}\u0026amp;project=${projectName}\u0026quot; //更新语言规则集 api/qualityprofiles/add_project?language=${language}\u0026amp;qualityProfile=${qualityProfile}\u0026amp;project=${projectName}\u0026quot; //项目授权 api/permissions/apply_template?projectKey=${projectKey}\u0026amp;templateName=${templateName}\u0026quot; //更新质量阈 api/qualitygates/select?projectKey=${projectKey}\u0026amp;gateId=${gateId}\u0026quot;  封装到共享库中sonarapi.groovy\npackage org.devops //封装HTTP def HttpReq(reqType,reqUrl,reqBody){ def sonarServer = \u0026quot;http://192.168.1.200:30090/api\u0026quot; result = httpRequest authentication: 'sonar-admin-user', httpMode: reqType, contentType: \u0026quot;APPLICATION_JSON\u0026quot;, consoleLogResponseBody: true, ignoreSslErrors: true, requestBody: reqBody, url: \u0026quot;${sonarServer}/${reqUrl}\u0026quot; //quiet: true return result } //获取Sonar质量阈状态 def GetProjectStatus(projectName){ apiUrl = \u0026quot;project_branches/list?project=${projectName}\u0026quot; response = HttpReq(\u0026quot;GET\u0026quot;,apiUrl,'') response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${response.content}\u0026quot;\u0026quot;\u0026quot; result = response[\u0026quot;branches\u0026quot;][0][\u0026quot;status\u0026quot;][\u0026quot;qualityGateStatus\u0026quot;] //println(response) return result } //搜索Sonar项目 def SerarchProject(projectName){ apiUrl = \u0026quot;projects/search?projects=${projectName}\u0026quot; response = HttpReq(\u0026quot;GET\u0026quot;,apiUrl,'') response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${response.content}\u0026quot;\u0026quot;\u0026quot; result = response[\u0026quot;paging\u0026quot;][\u0026quot;total\u0026quot;] if(result.toString() == \u0026quot;0\u0026quot;){ return \u0026quot;false\u0026quot; } else { return \u0026quot;true\u0026quot; } } //创建Sonar项目 def CreateProject(projectName){ apiUrl = \u0026quot;projects/create?name=${projectName}\u0026amp;project=${projectName}\u0026quot; response = HttpReq(\u0026quot;POST\u0026quot;,apiUrl,'') println(response) } //配置项目质量规则 def ConfigQualityProfiles(projectName,lang,qpname){ apiUrl = \u0026quot;qualityprofiles/add_project?language=${lang}\u0026amp;project=${projectName}\u0026amp;qualityProfile=${qpname}\u0026quot; response = HttpReq(\u0026quot;POST\u0026quot;,apiUrl,'') println(response) } //获取质量阈ID def GetQualtyGateId(gateName){ apiUrl= \u0026quot;qualitygates/show?name=${gateName}\u0026quot; response = HttpReq(\u0026quot;GET\u0026quot;,apiUrl,'') response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${response.content}\u0026quot;\u0026quot;\u0026quot; result = response[\u0026quot;id\u0026quot;] return result } //配置项目质量阈 def ConfigQualityGates(projectName,gateName){ gateId = GetQualtyGateId(gateName) apiUrl = \u0026quot;qualitygates/select?gateId=${gateId}\u0026amp;projectKey=${projectName}\u0026quot; response = HttpReq(\u0026quot;POST\u0026quot;,apiUrl,'') println(response)println(response) }  应用实践:\nstage(\u0026quot;QA\u0026quot;){ steps { script{ //搜索项目 result = sonarapi.SerarchProject(\u0026quot;${JOB_NAME}\u0026quot;) println(result) //判断项目是否存在 if (result == \u0026quot;false\u0026quot;){ println(\u0026quot;${JOB_NAME}---项目不存在,准备创建项目---\u0026gt; ${JOB_NAME}！\u0026quot;) sonarapi.CreateProject(\u0026quot;${JOB_NAME}\u0026quot;) } else { println(\u0026quot;${JOB_NAME}---项目已存在！\u0026quot;) } //配置项目质量规则 qpName=\u0026quot;${JOB_NAME}\u0026quot;.split(\u0026quot;-\u0026quot;)[0] //Sonar%20way sonarapi.ConfigQualityProfiles(\u0026quot;${JOB_NAME}\u0026quot;,\u0026quot;java\u0026quot;,qpName) //配置质量阈 sonarapi.ConfigQualityGates(\u0026quot;${JOB_NAME}\u0026quot;,qpName) //代码扫描 sonar.SonarScan(\u0026quot;test\u0026quot;,\u0026quot;${JOB_NAME}\u0026quot;,\u0026quot;${JOB_NAME}\u0026quot;,\u0026quot;src\u0026quot;) sleep 30 //获取扫描结果 result = sonarapi.GetProjectStatus(\u0026quot;${JOB_NAME}\u0026quot;) println(result) if (result.toString() == \u0026quot;ERROR\u0026quot;){ error \u0026quot; 代码质量阈错误！请及时修复！\u0026quot; } else { println(result) } } } }  配置多分支 将插件放到两个目录中，然后重启sonar\n扫描参数增加 –Dsonar.branch.name= 效果 "
},
{
	"uri": "/pipelinesyntax/chapter04/",
	"title": "Groovy基础语法",
	"tags": [],
	"description": "",
	"content": " 您好，本模块主要学习Groovy基础语法，掌握基础语法便于在流水线中数据处理😀\n 目录  简介 安装 数据类型  字符串string 列表list 映射map  条件语句  if语句 switch语句  循环语句  for循环语句 while循环语句  函数  简介 Groovy是一种功能强大，可选类型和动态 语言，支持Java平台。旨在提高开发人员的生产力得益于简洁，熟悉且简单易学的语法。可以与任何Java程序顺利集成，并立即为您的应用程序提供强大的功能，包括脚本编写功能，特定领域语言编写，运行时和编译时元编程以及函数式编程。\n安装  下载安装包(先安装JDK) 解压安装包 获取安装包bin目录 写入/etc/profile文件\nexport GROOVY_HOME=xxx export PATH=$PATH:$GROOVY_HOME/bin source /etc/profile   数据类型 字符串string 字符串表示： 单引号、双引号、三引号\ncontains() 是否包含特定内容 返回true false size() length() 字符串数量大小长度 toString() 转换成string类型 indexOf() 元素的索引 endsWith() 是否指定字符结尾 minus() plus() 去掉、增加字符串 reverse() 反向排序 substring(1,2) 字符串的指定索引开始的子字符串 toUpperCase() toLowerCase() 字符串大小写转换 split() 字符串分割 默认空格分割 返回列表  列表list 列表的表示： [] [1,2,3,4]\n+ - += -= 元素增加减少 isEmpty() 判断add() \u0026lt;\u0026lt; 添加元素 是否为空 intersect([2,3]) disjoint([1]) 取交集、判断是否有交集 flatten() 合并嵌套的列表 unique() 去重 reverse() sort() 反转 升序 count() 元素个数 join() 将元素按照参数链接 sum() min() max() 求和 最小值 最大值 contains() 包含特定元素 remove(2) removeAll() each{} 遍历  映射map types = [\u0026ldquo;maven\u0026rdquo;:\u0026ldquo;mvn\u0026rdquo;]\nsize() map大小 [’key’] .key get() 获取value isEmpty() 是否为空 containKey() 是否包含key containValue() 是否包含指定的value keySet() 生成key的列表 each{} 遍历map remove(‘a‘) 删除元素（k-v） 练习 groovy:000\u0026gt; [:] ===\u0026gt; [:] groovy:000\u0026gt; [1:2] ===\u0026gt; [1:2] groovy:000\u0026gt; [1:2][1] ===\u0026gt; 2 groovy:000\u0026gt; [1:2,3:4,5:6] ===\u0026gt; [1:2, 3:4, 5:6] groovy:000\u0026gt; [1:2,3:4,5:6].keySet() ===\u0026gt; [1, 3, 5] groovy:000\u0026gt; [1:2,3:4,5:6].values() ===\u0026gt; [2, 4, 6] groovy:000\u0026gt; [1:2,3:4,5:6] + [7:8] ===\u0026gt; [1:2, 3:4, 5:6, 7:8] groovy:000\u0026gt; [1:2,3:4,5:6] - [7:8] ===\u0026gt; [1:2, 3:4, 5:6]  条件语句 if语句 在Jenkinsfile中可用于条件判断。\nif (表达式) { //xxxx } else if(表达式2) { //xxxxx } else { // } 练习 groovy:000\u0026gt; buildType = \u0026quot;maven\u0026quot; ===\u0026gt; maven groovy:000\u0026gt; if (buildType == \u0026quot;maven\u0026quot;){ groovy:001\u0026gt; println(\u0026quot;This is a maven project!\u0026quot;) groovy:002\u0026gt; } else if (buildType == \u0026quot;gradle\u0026quot;){ groovy:003\u0026gt; println(\u0026quot;This is a gradle project!\u0026quot;) groovy:004\u0026gt; } else { groovy:005\u0026gt; println(\u0026quot;Project Type Error!\u0026quot;) groovy:006\u0026gt; }  switch语句 switch(\u0026quot;${buildType}\u0026quot;){ case ”maven\u0026quot;: //xxxx break; case ”ant\u0026quot;: //xxxx break; default: //xxxx } 练习 switch(\u0026quot;${buildType}\u0026quot;){ case 'maven': println(\u0026quot;This is a maven project !\u0026quot;) break; ;; case 'gradle': println(\u0026quot;This is a gradle projects!\u0026quot;) break; ;; default: println(\u0026quot;Project Type Error!\u0026quot;) ;; }  循环语句 for循环语句 test = [1,2,3] for ( i in test){ ///xxxxxx break; } //代码 langs = ['java','python','groovy'] for ( lang in langs ){ if (lang == \u0026quot;java\u0026quot;){ println(\u0026quot;lang error in java\u0026quot;) }else { println(\u0026quot;lang is ${lang}\u0026quot;) } }  while循环语句 while(true){ //xxxx }  函数 在共享库中每个类中的方法。\ndef PrintMes(info){ println(info) return info } response = PrintMes(\u0026quot;DevOps\u0026quot;) println(response)  "
},
{
	"uri": "/basics/projectandview/",
	"title": "Jenkins项目与视图管理",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们将指导大家Jenkins中的项目类型，通过视图对项目进行管理 😀 创建一个项目很简单，如何管理大规模下的项目呢？ -建立合适的命名规范。\n 目录  项目管理\n 新建项目 删除禁用项目 项目分类  视图管理\n 创建视图 删除视图 更新视图   项目管理 管理项目的前提是，具有合理的命名规范。 命名规范: 业务名称-应用名称-应用类型_环境类型： cxy-wlck-ui_TEST, 有命名规范后会更加方便管理项目。\n新建项目 新建一个项目，项目的类型有很多，例如自由风格的项目、maven类型项目等。这里我们主要用的是流水线pipeline类型的项目。\n设置构建历史：构建历史要有合理的策略，过多历史数据会导致jenkins磁盘空间增大。例如：保留30天内的近20次构建记录。\n选择参数化构建： 参数化构建就是将项目的信息变成编程语言中的变量，便于后期流水线运行时引用。\n设置Jenkinsfile： Jenkinsfile如同dockerfile，在docker中使用dockerfile创建出一个镜像，在jenkins中使用jenkinsfile定义项目流水线的运行步骤和运行相关配置。Jenkinsfile可以直接写在项目中，也可以通过scm版本控制系统进行管理。选择后种方式便于回退，更加友好。\n构建项目： 很简单，直接点击构建就好了。当然触发构建的方式后很多，见后续扩展内容。 查看构建日志： 构建日志是一条流水线项目的运行步骤信息，例如构建的错误信息等。便于排错。 调试Pipeline：当流水线出问题的时候，可以不直接修改源文件，而是通过流水线的回放功能进行编辑调试运行。很有用的功能，便于调试。 删除禁用项目 当项目不需要的时候可以进行先禁用再删除。 项目分类 当项目很多时候可以按照项目或者业务建立文件夹，将同业务的项目移动到文件夹中。 移动项目 视图管理 默认Jenkins会自动创建一个all视图，里面存放所有的项目。\n创建视图 点击加号新建视图 填写视图的名称，选择列表视图 选择视图包含的项目。这里使用正则表达式的方式，当然也可以直接手动选择。 创建完成 删除视图 更新视图 "
},
{
	"uri": "/pipelineintegrated/chapter05/",
	"title": "3-5 制品仓库集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们主要讲述Jenkins与制品库nexus、artiifactory集成，上传下载制品。\n 目录  部署 功能 基本概念 上传制品 集成jenkins上传制品 使用nexus插件上传制品 发布制品 nexus接口 artifactory集成  构建制品 上传制品   部署 测试环境使用Docker安装部署\ndocker run -id \\ --privileged=true --name=nexus3 \\ -p 8081:8081 \\ -v ${LOCALDIR}/nexus3/nexus-data:/nexus-data \\ sonatype/nexus3:3.20.1  安装完成后默认的admin账号密码存储在了数据目录，获取初始化密码后更新账号密码。 功能 私服仓库： 本地maven私服加快构建速度 代理仓库：将公网等第三方提供的仓库代理到本地\n基本概念 组件是一种资源，在构建过程中需要依赖。它可以是整个应用程序，也可以是静态资源（例如图片）。 通常，这些组件是各种文件的存档，包括：类文件中的Java字节码、C对象文件、文本文件、二进制文件。 组件的多种格式，例如：Java JAR，WAR，EAR格式；普通ZIP或.tar.gz文件；其他软件包格式，例如NuGet软件包，Ruby gems，NPM软件包；可执行文件格式，例如.exe 或.sh 文件，Android APK文件，各种安装程序格式。 组件可以由多个嵌套组件本身组成。组件提供了所有构建块和功能。可以通过组装并添加自己的业务相关组件来创建功能强大的完整应用程序。在不同的工具链中，组件称为工件，程序包，捆绑包，归档和其他术语。概念和想法保持不变，组件用作通用术语。组件由一组特定值（坐标）标识。这些坐标的通用集是组，名称和版本的用法。这些坐标的名称和用法随所使用的工具链而变化。组件也可以成为其他元数据的基础\n资产 ：例如Maven项目中的pom文件算是资产一部分，包含元数据的重要补充。 实际的存档文件（pom.xml）是与组件（ jar/war包）关联的资产。但是，更复杂的格式具有与组件（jar包）关联的众多资产（pom）。例如，Maven存储库中的典型JAR组件至少由POM和JAR文件定义-两者均构成属于同一组件的单独资产。其他文件（例如JavaDoc或Sources JAR文件）是属于同一组件的资产。 另一方面，Docker格式为资产提供唯一的标识符，并将其称为Docker层。这些资产可用于不同的组件-Docker映像。例如，一个Docker层可以是多个Docker映像引用的特定操作系统。\n上传制品 我们需要在nexus中创建一个新的仓库maven-hostd,同时我们需要在maven的配置文件settings.xml中配置maven-hostd认证。如下：\n \u0026lt;server\u0026gt; \u0026lt;id\u0026gt;maven-hostd\u0026lt;/id\u0026gt; \u0026lt;username\u0026gt;admin\u0026lt;/username\u0026gt; \u0026lt;password\u0026gt;admin123\u0026lt;/password\u0026gt; \u0026lt;/server\u0026gt;  注意使用mvn deploy 发布时，server.id == respository.id。\n集成jenkins上传制品 步骤：获取Jar包名称、读取pom文件、获取坐标信息、使用mvn deploy上传。\ndef jarName = sh returnStdout: true, script: \u0026quot;cd target;ls *.jar\u0026quot; jarName = jarName - \u0026quot;\\n\u0026quot; def pom = readMavenPom file: 'pom.xml' pomVersion = \u0026quot;${pom.version}\u0026quot; pomArtifact = \u0026quot;${pom.artifactId}\u0026quot; pomPackaging = \u0026quot;${pom.packaging}\u0026quot; pomGroupId = \u0026quot;${pom.groupId}\u0026quot; println(\u0026quot;${pomGroupId}-${pomArtifact}-${pomVersion}-${pomPackaging}\u0026quot;) def mvnHome = tool \u0026quot;M2\u0026quot; sh \u0026quot;\u0026quot;\u0026quot; cd target/ ${mvnHome}/bin/mvn deploy:deploy-file -Dmaven.test.skip=true \\ -Dfile=${jarName} -DgroupId=${pomGroupId} \\ -DartifactId=${pomArtifact} -Dversion=${pomVersion} \\ -Dpackaging=${pomPackaging} -DrepositoryId=maven-hostd \\ -Durl=http://192.168.1.200:30083/repository/maven-hostd \u0026quot;\u0026quot;\u0026quot;  使用nexus插件上传制品 安装nexus artifact uploader插件、使用片段生成器生成DSL。\n开始编写Jenkinsfile\n//use nexus plugin def repoName = \u0026quot;maven-hostd\u0026quot; def filePath = \u0026quot;target/${jarName}\u0026quot; nexusArtifactUploader artifacts: [[artifactId: \u0026quot;${pomArtifact}\u0026quot;, classifier: '', file: \u0026quot;${filePath}\u0026quot;, type: \u0026quot;${pomPackaging}\u0026quot;]], credentialsId: 'nexus-admin-user', groupId: \u0026quot;${pomGroupId}\u0026quot;, nexusUrl: '192.168.1.200:30083', nexusVersion: 'nexus3', protocol: 'http', repository: \u0026quot;${repoName}\u0026quot;, version: \u0026quot;${pomVersion}\u0026quot;  查看上传的日志 查看仓库制品 发布制品 安装Maven Artifact ChoiceListProvider (Nexus)插件\n用户选择制品，在应用服务器通过salt、ansible下载制品并部署 nexus接口 package org.devops //封装HTTP def HttpReq(reqType,reqUrl,reqBody){ def sonarServer = \u0026quot;http://192.168.1.200:30083/service/rest\u0026quot; result = httpRequest authentication: 'nexus-admin-user', httpMode: reqType, contentType: \u0026quot;APPLICATION_JSON\u0026quot;, consoleLogResponseBody: true, ignoreSslErrors: true, requestBody: reqBody, url: \u0026quot;${sonarServer}/${reqUrl}\u0026quot;, quiet: true return result } //获取仓库中所有组件 def GetRepoComponents(repoName){ apiUrl = \u0026quot;/v1/components?repository=${repoName}\u0026quot; response = HttpReq(\u0026quot;GET\u0026quot;,apiUrl,'') response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${response.content}\u0026quot;\u0026quot;\u0026quot; println(response[\u0026quot;items\u0026quot;].size()) return response[\u0026quot;items\u0026quot;] } //获取单件组件 def GetComponentsId(repoName,groupId,artifactId,version){ println(\u0026quot;获取单件组件ID\u0026quot;) result = GetRepoComponents(repoName) for (component in result){ if (component[\u0026quot;group\u0026quot;] == groupId \u0026amp;\u0026amp; component[\u0026quot;name\u0026quot;] == artifactId \u0026amp;\u0026amp; component[\u0026quot;version\u0026quot;] == version ){ componentId = component[\u0026quot;id\u0026quot;] return componentId } } println(componentId) } //获取组件信息 def GetSingleComponents(repoName,groupId,artifactId,version){ println(\u0026quot;获取单件组件信息\u0026quot;) componentId = GetComponentsId(repoName,groupId,artifactId,version) apiUrl = \u0026quot;/v1/components/${componentId}\u0026quot; response = HttpReq(\u0026quot;GET\u0026quot;,apiUrl,'') response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${response.content}\u0026quot;\u0026quot;\u0026quot; println(response[\u0026quot;assets\u0026quot;][\u0026quot;downloadUrl\u0026quot;]) }  artifactory集成 安装Artifactory插件，配置Artifactory仓库信息（仓库地址、用户认证信息）。 构建制品 package org.devops //Maven打包构建 def MavenBuild(buildShell){ def server = Artifactory.newServer url: \u0026quot;http://192.168.1.200:30082/artifactory\u0026quot; def rtMaven = Artifactory.newMavenBuild() def buildInfo server.connection.timeout = 300 server.credentialsId = 'artifactory-admin-user' //maven打包 rtMaven.tool = 'M2' buildInfo = Artifactory.newBuildInfo() String newBuildShell = \u0026quot;${buildShell}\u0026quot;.toString() println(newBuildShell) rtMaven.run pom: 'pom.xml', goals: newBuildShell, buildInfo: buildInfo //上传build信息 server.publishBuildInfo buildInfo } def main(buildType,buildShell){ if(buildType == \u0026quot;mvn\u0026quot;){ MavenBuild(buildShell) } }  查看构建数据： 命名规范\n仓库命名规范 业务/项目-环境类型 例如： demo-dev 制品命名规范 应用名称-版本号-构建ID.type 例如： demo-myapp-service-1.jar 制品目录规范 业务/项目 应用名称 版本号 制品  上传制品 rtUpload ( serverId: \u0026quot;art1\u0026quot;, spec: \u0026quot;\u0026quot;\u0026quot;{ \u0026quot;files\u0026quot;: [ { \u0026quot;pattern\u0026quot;: \u0026quot;target/${jarName}\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;${uploadDir}/\u0026quot; } ] }\u0026quot;\u0026quot;\u0026quot; )  "
},
{
	"uri": "/pipelinesyntax/chapter05/",
	"title": "流水线开发工具",
	"tags": [],
	"description": "",
	"content": " 您好，本模块主要了解在流水线中常用的方法😀\n 目录  片段生成器 声明式语法生成器 全局变量参考  env变量 currentbuild变量  常用的方法  片段生成器 使用片段生成器可以根据个人需要生成方法，有些方法来源于插件，则需要先安装相关的插件才能使用哦。\n填写好参数后，点击生成，然后复制粘贴到Jenkinsfile 声明式语法生成器 全局变量参考 env变量 BUILD_NUMBER //构建号 BUILD_ID //构建号 BUILD_DISPLAY_NAME //构建显示名称 JOB_NAME //项目名称 EXECUTOR_NUMBER //执行器数量 NODE_NAME //构建节点名称 WORKSPACE //工作目录 JENKINS_HOME //Jenkins home JENKINS_URL //Jenkins地址 BUILD_URL //构建地址 JOB_URL //项目地址  currentbuild变量 result currentResult //构建结果 displayName //构建名称 #111 description //构建描述 duration //持续时间  常用的方法 json数据处理\ndef response = readJSON text: \u0026quot;${scanResult}\u0026quot; println(scanResult) //原生方法 import groovy.json.* @NonCPS def GetJson(text){ def prettyJson = JsonOutput.prettyPrint(text) new JsonSlurperClassic().parseText(prettyJson) }  使用凭据\nwithCredentials([string(credentialsId: \u0026quot;xxxxx\u0026quot;, variable: \u0026quot;sonarToken\u0026quot;)]) { println(sonarToken) }  下载代码\n//Git checkout([$class: 'GitSCM', branches: [[name: \u0026quot;brnachName\u0026quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: \u0026quot;${credentialsId}\u0026quot;, url: \u0026quot;${srcUrl}\u0026quot;]]]) //Svn checkout([$class: 'SubversionSCM', additionalCredentials: [], filterChangelog: false, ignoreDirPropChanges: false, locations: [[credentialsId: \u0026quot;${credentialsId}\u0026quot;, depthOption: 'infinity', ignoreExternalsOption: true, remote: \u0026quot;${svnUrl}\u0026quot;]], workspaceUpdater: [$class: 'CheckoutUpdater']] )  展示报告\npublishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: './report/', reportFiles: \u0026quot;a.html, b.html\u0026quot;, reportName: 'InterfaceTestReport', reportTitles: 'HTML'])  交互输入\ndef result = input message: '选择xxxxx', ok: '提交', parameters: [extendedChoice( description: 'xxxxx', descriptionPropertyValue: '', multiSelectDelimiter: ',', name: 'failePositiveCases', quoteValue: false, saveJSONParameterToFile: false, type: 'PT_CHECKBOX', value: \u0026quot;1,2,3\u0026quot;, visibleItemCount: 99)] println(result)  构建用户\nwrap([$class: 'BuildUser']){ echo \u0026quot;full name is $BUILD_USER\u0026quot; echo \u0026quot;user id is $BUILD_USER_ID\u0026quot; echo \u0026quot;user email is $BUILD_USER_EMAIL\u0026quot; }  制品上传\nrtUpload ( serverId: \u0026quot;artifactory01\u0026quot;, spec: \u0026quot;\u0026quot;\u0026quot;{ \u0026quot;files\u0026quot;: [ { \u0026quot;pattern\u0026quot;: \u0026quot;report/a.html\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;${repoName}/a/b/v\u0026quot; } ] }\u0026quot;\u0026quot;\u0026quot; )  发送http请求\nApiUrl = \u0026quot;http://xxxxxx/api/project_branches/list?project=${projectName}\u0026quot; Result = httpRequest authentication: 'xxxxxxxxx', quiet: true, contentType: 'APPLICATION_JSON' , url: \u0026quot;${ApiUrl}\u0026quot;  "
},
{
	"uri": "/cont/tags/",
	"title": "Tags",
	"tags": ["documentation", "tutorial"],
	"description": "",
	"content": " Learn theme support one default taxonomy of gohugo: the tag feature.\nConfiguration Just add tags to any page:\n--- date: 2018-11-29T08:41:44+01:00 title: Theme tutorial weight: 15 tags: [\u0026quot;tutorial\u0026quot;, \u0026quot;theme\u0026quot;] ---  Behavior The tags are displayed at the top of the page, in their insertion order.\nEach tag is a link to a Taxonomy page displaying all the articles with the given tag.\nList all the tags In the config.toml file you can add a shortcut to display all the tags\n[[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-tags'\u0026gt;\u0026lt;/i\u0026gt; Tags\u0026quot; url = \u0026quot;/tags\u0026quot; weight = 30  "
},
{
	"uri": "/cont/tags.fr/",
	"title": "Tags",
	"tags": ["documentation", "tutorial"],
	"description": "",
	"content": " Le thème Learn supporte une des taxonomy par défaut de GoHugo : les tags.\nConfiguration Il suffit d\u0026rsquo;ajouter un tableau de tags sur la page :\n--- date: 2018-11-29T08:41:44+01:00 title: Tutoriel pour le thème weight: 15 tags: [\u0026quot;tutoriel\u0026quot;, \u0026quot;theme\u0026quot;] ---  Comportement Les tags sont affichés en haut de la page, dans l\u0026rsquo;ordre dans lequel ils ont été saisis.\nChaque tag est un lien vers une page Taxonomy, qui affiche tous les article avec ce tag.\nListe des tags Il est possible de rajouter un raccourci dans le fichier config.toml afin d\u0026rsquo;afficher une page listant tous les tags\n[[menu.shortcuts]] name = \u0026quot;\u0026lt;i class='fas fa-tags'\u0026gt;\u0026lt;/i\u0026gt; Tags\u0026quot; url = \u0026quot;/tags\u0026quot; weight = 30  "
},
{
	"uri": "/pipelineintegrated/chapter06/",
	"title": "3-6 需求管理平台集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们主要讲述Jenkins与需求管理平台Jira集成。这篇文章是我根据我们当前团队的情况进行定制的，可能有些内容与大家不太一样。重点是告诉大家如何实现集成？关于细节问题可自由定制。 在这里要告诉大家的是思路。\n 目录  工具链调研分析 实践 总结  在这里先说一下，当前的现状。我们使用Jira的Git插件能够实现在Jira上面新建Gitlab分支（实现需求与代码基线关联），这个操作需要手动完成。使用Jira中的Git插件实现集成，能够实现在Jira系统对应的任务下面创建分支，或开发人员在创建分支的时候分支名称包含Jira ID则可以自动关联。 通过上面的描述你应该发现了存在的一些问题，例如：插件不稳定，资源消耗大。手动创建分支，增加了人员成本。\n来我们先看下当前的分支策略（每个团队可能会有自己的一套分支策略）。 开发人员在特性分支进行开发，基于master分支创建一个版本分支（用于发布）。特性分支在特性环境验证通过后，将特性分支合并到版本分支，此时通过版本分支进行UAT测试环境、STAG预生产环境验证测试，测试通过通过版本分支发布PROD生产环境。生产环境发布完成后，将版本分支合并到master分支。\n为解决上述问题，制作了改进方案。 我们想实现在Jira中创建故事或者任务(Jira中的issue)时自动在对应的代码库创建分支，故事或者任务在关联到发布（Jira中的release）之后自动在代码库中创建一个release分支和特性分支到release分支的合并请求。\n工具链调研分析 其实我们需要配置的是通过Jira的Webhook 触发Jenkins来操作Gitlab系统。主要有三个点：\n Jenkins项目配置触发器接收触发请求 Jira系统配置webHook触发Jenkins Jenkins封装GitlabAPI完成相关操作  Jira调研与分析-webhook 关于Jira的webhook挺强大的几乎所有的事件都能支持，我们进入jira系统的管理页面，选择webhook。\n填写配置触发器URL(Jenkins项目触发器地址)、通过JQL（Jira的一种查询语言类似于SQL）配置触发的项目、选择触发事件。\nJira调研与分析-webhookevent 在上面我们知道有webhook的概念，我们来分析要完成我们的需求所需要的事件类型。其实这些数据是在webhook中传递。Jira的事件类型如上图所示有很多，在这里我们用到了 问题创建jira:issue_created、问题更新jira:issue_update。\n 创建任务或者故事属于jira:issue_created事件。 任务或者故事关联上版本属于jira:issue_updated事件。  来一起看下Jira的webhook传递的JSON数据，如下图所示：\n到此可以总结为Jira的功能已经完全满足了我们的需求。\nGitlab调研与分析 关于Gitlab要做的事情有2点，分别为:\n 创建分支（branch） 创建合并请求（merge request）  我们可以参考Gitlab的接口文档 https://docs.gitlab.com/ce/api/api_resources.html, 找出我们所需要的API。如下所示：\n# 获取项目ID接口 api/v4/projects?search=projectName # 创建分支接口 api/v4/projects/${projectId}/repository/branches?branch=${newBranch}\u0026amp;ref=${refBranch} # 创建合并请求接口 api/v4/projects/${projectId}/merge_requests  我们找到了以上三个接口，是不是疑问获取项目ID接口是用来做什么的呢？ 其实这个就是用来通过项目名称获取项目的ID的。要想创建分支或者合并请求都是需要项目的ID的。项目名称就是Jira中的模块名称，也就是在Jira创建issue的时候必须要给此issue关联一个模块。后续我们根据此模块名称调用gitlab接口查询获取ID，以便进行后续的操作。\n Jenkins调研与分析- Generic Webhook Trigger 我们使用Generic Webhook Trigger来完成此次任务， 对于Jenkins来说，需要做的有3点：\n 配置触发器接收来自Jira的请求 分析Jira请求中传递的数据 封装Gitlab API完成相关操作  分析数据 获取hook中参数-获取问题名称-获取模块名称等数据 配置触发器 生成项目唯一Token-使用项目名称标识 配置触发过滤器 过滤触发请求-限制只有故事任务等触发（在Jira中issue类型有很多种，这里可以灵活定义） 实践 上面的技术点你是否清楚了呢？ 接下来我们要上战场实践了。\n创建issue自动创建gitlab分支 我想大概过程是这样的：\n Jira: 我来创建与gitlab项目名称一致的模块。然后我来创建issue关联上模块。 此时通过webhook触发了Jenkins的项目。 Jenkins: 我来接收来自Jira的请求，我在请求中获取到issueName,components等参数。 Jenkins: 通过gitlab查询项目接口根据components来获取gitlab项目的ID。 Jenkins: 然后根据以获取的项目ID和issueName参数，通过gitlab创建分支接口创建分支。  技术实现细节是这样的\n要想实现在gitlab中创建分支，接口我们已经找到了，但是如何获取每个issue所关联的项目名称呢？我们自己维护一个关系表？当一个issue需要关联多个项目呢？ 此时我们需要用到jira中的模块。使用jira中的模块来作为gitlab中的项目（命名一致），我们在创建issue的同时需要关联模块（必须关联,否则创建不了哦）。所以第一件事情是在Jira中创建模块，模块命名同Gitlab项目名称\n此时我创建了一个模块demo-maven-service(我的gitlab项目名称也是这个) 然后我（Jira）来创建issues，我创建一个任务，然后关联demo-maven-service模块 。此时证明：这个任务关联的是demo-maven-service这个代码库。也就是我要在demo-maven-service项目下创建一个issueName同名的分支（特性分支）。\n触发Jenkins项目： Jenkins 根据模块（components）在对应的仓库中创建分支（IssueName）。JIRA更新issues，Jenkins 根据模块（components）在对应的仓库中创建分支（issuesName）。\n我的Jenkinsfile内容如下： 在这里我引入了我们自己封装好的gitlab.groovy，首先第一个步骤是FileterData分析数据，写了一个 switch语句来根据不同的event来获取不同的数据。jira:issue_created问题创建事件，我们需要获取的参数有问题名称、触发人、关联模块、关联版本。 然后第二个步骤是CreateBranch，我们通过gitlab的接口获取项目的ID，因为一个issue可能关联多个模块，所以这里是个list列表，后面遍历这个列表然后创建在对应的项目中创建分支。\n#!groovy @Library('jenkinslibrary') _ def gitlab = new org.devops.gitlab() pipeline { agent { node { label \u0026quot;master\u0026quot;}} stages{ stage(\u0026quot;FileterData\u0026quot;){ steps{ script{ response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${webHookData}\u0026quot;\u0026quot;\u0026quot; println(response) env.eventType = response[\u0026quot;webhookEvent\u0026quot;] switch(eventType) { case \u0026quot;jira:issue_created\u0026quot;: env.issueName = response['issue']['key'] env.userName = response['user']['name'] env.moduleNames = response['issue']['fields']['components'] env.fixVersion = response['issue']['fields']['fixVersions'] currentBuild.description = \u0026quot; Trigger by ${userName} ${eventType} ${issueName} \u0026quot; break default: println(\u0026quot;hello\u0026quot;) } } } } stage(\u0026quot;CreateBranch\u0026quot;){ when { anyOf { environment name: 'eventType', value: 'jira:issue_created' //issue 创建 /更新 environment name: 'eventType', value: 'jira:issue_updated' } } steps{ script{ def projectIds = [] println(issueName) //获取项目Id def projects = readJSON text: \u0026quot;\u0026quot;\u0026quot;${moduleNames}\u0026quot;\u0026quot;\u0026quot; for ( project in projects){ println(project[\u0026quot;name\u0026quot;]) projectName = project[\u0026quot;name\u0026quot;] currentBuild.description += \u0026quot;\\n project: ${projectName}\u0026quot; repoName = projectName.split(\u0026quot;-\u0026quot;)[0] try { projectId = gitlab.GetProjectID(repoName, projectName) println(projectId) projectIds.add(projectId) } catch(e){ println(e) println(\u0026quot;未获取到项目ID，请检查模块名称！\u0026quot;) } } println(projectIds) for (id in projectIds){ println(\u0026quot;新建特性分支--\u0026gt; ${id} --\u0026gt; ${issueName}\u0026quot;) currentBuild.description += \u0026quot;\\n 新建特性分支--\u0026gt; ${id} --\u0026gt; ${issueName}\u0026quot; gitlab.CreateBranch(id,\u0026quot;master\u0026quot;,\u0026quot;${issueName}\u0026quot;) } } } } } }  最终效果，登录gitlab进入项目中你应该能够看到跟当前issue同名的一个特性分支。 为了避免重复创建分支导致流水线失败，我们需要在写gitlab方法时加上一个try catch捕获异常。\n 自动创建合并请求 JIRA更新issues到版本中。 Jenkins根据issues中的模块信息，在对应的仓库中创建release分支（fixVersion），并创建特性分支（issueName）到release分支的MR。 jira的issue更新事件有两个情况第一种是增加关联的模块，还有一种是将issue关联了版本。\n我们先来创建一个版本 然后将issue关联一个版本\n完善Jenkinsfile\n@Library('jenkinslibrary') _ def gitlab = new org.devops.gitlab() pipeline { agent { node { label \u0026quot;master\u0026quot;}} stages{ stage(\u0026quot;FileterData\u0026quot;){ steps{ script{ response = readJSON text: \u0026quot;\u0026quot;\u0026quot;${webHookData}\u0026quot;\u0026quot;\u0026quot; println(response) env.eventType = response[\u0026quot;webhookEvent\u0026quot;] switch(eventType) { case \u0026quot;jira:issue_created\u0026quot;: env.issueName = response['issue']['key'] env.userName = response['user']['name'] env.moduleNames = response['issue']['fields']['components'] env.fixVersion = response['issue']['fields']['fixVersions'] currentBuild.description = \u0026quot; Trigger by ${userName} ${eventType} ${issueName} \u0026quot; break case \u0026quot;jira:issue_updated\u0026quot;: env.issueName = response['issue']['key'] env.userName = response['user']['name'] env.moduleNames = response['issue']['fields']['components'] env.fixVersion = response['issue']['fields']['fixVersions'] currentBuild.description = \u0026quot; Trigger by ${userName} ${eventType} ${issueName} \u0026quot; break default: println(\u0026quot;hello\u0026quot;) } } } } stage(\u0026quot;CreateBranchOrMR\u0026quot;){ when { anyOf { environment name: 'eventType', value: 'jira:issue_created' //issue 创建 /更新 environment name: 'eventType', value: 'jira:issue_updated' } } steps{ script{ def projectIds = [] println(issueName) fixVersion = readJSON text: \u0026quot;\u0026quot;\u0026quot;${fixVersion}\u0026quot;\u0026quot;\u0026quot; println(fixVersion.size()) //获取项目Id def projects = readJSON text: \u0026quot;\u0026quot;\u0026quot;${moduleNames}\u0026quot;\u0026quot;\u0026quot; for ( project in projects){ println(project[\u0026quot;name\u0026quot;]) projectName = project[\u0026quot;name\u0026quot;] currentBuild.description += \u0026quot;\\n project: ${projectName}\u0026quot; repoName = projectName.split(\u0026quot;-\u0026quot;)[0] try { projectId = gitlab.GetProjectID(repoName, projectName) println(projectId) projectIds.add(projectId) } catch(e){ println(e) println(\u0026quot;未获取到项目ID，请检查模块名称！\u0026quot;) } } println(projectIds) if (fixVersion.size() == 0) { for (id in projectIds){ println(\u0026quot;新建特性分支--\u0026gt; ${id} --\u0026gt; ${issueName}\u0026quot;) currentBuild.description += \u0026quot;\\n 新建特性分支--\u0026gt; ${id} --\u0026gt; ${issueName}\u0026quot; gitlab.CreateBranch(id,\u0026quot;master\u0026quot;,\u0026quot;${issueName}\u0026quot;) } } else { fixVersion = fixVersion[0]['name'] println(\u0026quot;Issue关联release操作,Jenkins创建合并请求\u0026quot;) currentBuild.description += \u0026quot;\\n Issue关联release操作,Jenkins创建合并请求 \\n ${issueName} --\u0026gt; RELEASE-${fixVersion}\u0026quot; for (id in projectIds){ println(\u0026quot;创建RELEASE--\u0026gt;${id} --\u0026gt;${fixVersion}分支\u0026quot;) gitlab.CreateBranch(id,\u0026quot;master\u0026quot;,\u0026quot;RELEASE-${fixVersion}\u0026quot;) println(\u0026quot;创建合并请求 ${issueName} ---\u0026gt; RELEASE-${fixVersion}\u0026quot;) gitlab.CreateMr(id,\u0026quot;${issueName}\u0026quot;,\u0026quot;RELEASE-${fixVersion}\u0026quot;,\u0026quot;${issueName}---\u0026gt;RELEASE-${fixVersion}\u0026quot;) } } } } } } }  Gitlab效果：查看合并请求 总结 通过以上两个实践，相信你已经知道了如何实现系统间的集成，没错主要是通过webhook和api。 接下来如果有需求可以独立去灵活定义了哦。\n"
},
{
	"uri": "/pipelineintegrated/chapter07/",
	"title": "3-7 容器PaaS平台集成",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们主要讲述Jenkins与需求管理平台Jira集成。这篇文章是我根据我们当前团队的情况进行定制的，可能有些内容与大家不太一样。重点是告诉大家如何实现集成？关于细节问题可自由定制。 在这里要告诉大家的是思路。\n 目录  部署jenkins 静态slave 动态slave  当前我做实验的集群是 v1.17.0。\n部署jenkins 下载github仓库中的yml文件进行部署 文件地址： https://github.com/zeyangli/devops-on-k8s/blob/master/jenkins.yml 创建命令： kubectl create –f jenkins.yml\n创建一个Deployment部署jenkins, 保留1个副本。 使用镜像jenkins/jenkins:2.211，开放端口30080,开发slave通信端口30081。volume以hostPath方式挂载到了容器中JENKINS_HOME。\nkind: Deployment apiVersion: apps/v1 metadata: labels: k8s-app: jenkins name: jenkins namespace: devops spec: replicas: 1 revisionHistoryLimit: 10 selector: matchLabels: k8s-app: jenkins template: metadata: labels: k8s-app: jenkins namespace: devops name: jenkins spec: hostAliases: - ip: \u0026quot;192.168.1.200\u0026quot; hostnames: - \u0026quot;updates.jenkins-ci.org\u0026quot; containers: - name: jenkins image: jenkins/jenkins:2.211 imagePullPolicy: Always ports: - containerPort: 30080 name: web protocol: TCP - containerPort: 30081 name: agent protocol: TCP resources: limits: cpu: 1000m memory: 2Gi requests: cpu: 500m memory: 512Mi livenessProbe: httpGet: path: /login port: 30080 initialDelaySeconds: 60 timeoutSeconds: 5 failureThreshold: 12 readinessProbe: httpGet: path: /login port: 30080 initialDelaySeconds: 60 timeoutSeconds: 5 failureThreshold: 12 volumeMounts: - name: jenkins-home mountPath: /var/lib/jenkins env: - name: JENKINS_HOME value: /var/lib/jenkins - name: JENKINS_OPTS value: --httpPort=30080 - name: JENKINS_SLAVE_AGENT_PORT value: \u0026quot;30081\u0026quot; volumes: - name: jenkins-home hostPath: path: /data/devops/jenkins type: Directory serviceAccountName: jenkins  创建一个service，使用nodePort方式暴露端口\n--- kind: Service apiVersion: v1 metadata: labels: k8s-app: jenkins name: jenkins namespace: devops spec: type: NodePort ports: - name: web port: 30080 targetPort: 30080 nodePort: 30080 - name: slave port: 30081 targetPort: 30081 nodePort: 30081 selector: k8s-app: jenkins  创建RBAC，授权。\n--- apiVersion: v1 kind: ServiceAccount metadata: labels: k8s-app: jenkins name: jenkins namespace: devops --- kind: Role apiVersion: rbac.authorization.k8s.io/v1beta1 metadata: name: jenkins namespace: devops rules: - apiGroups: [\u0026quot;\u0026quot;] resources: [\u0026quot;pods\u0026quot;,\u0026quot;configmaps\u0026quot;,\u0026quot;namespaces\u0026quot;] verbs: [\u0026quot;create\u0026quot;,\u0026quot;delete\u0026quot;,\u0026quot;get\u0026quot;,\u0026quot;list\u0026quot;,\u0026quot;patch\u0026quot;,\u0026quot;update\u0026quot;,\u0026quot;watch\u0026quot;] - apiGroups: [\u0026quot;\u0026quot;] resources: [\u0026quot;pods/exec\u0026quot;] verbs: [\u0026quot;create\u0026quot;,\u0026quot;delete\u0026quot;,\u0026quot;get\u0026quot;,\u0026quot;list\u0026quot;,\u0026quot;patch\u0026quot;,\u0026quot;update\u0026quot;,\u0026quot;watch\u0026quot;] - apiGroups: [\u0026quot;\u0026quot;] resources: [\u0026quot;pods/log\u0026quot;] verbs: [\u0026quot;get\u0026quot;,\u0026quot;list\u0026quot;,\u0026quot;watch\u0026quot;] - apiGroups: [\u0026quot;\u0026quot;] resources: [\u0026quot;secrets\u0026quot;] verbs: [\u0026quot;get\u0026quot;] --- apiVersion: rbac.authorization.k8s.io/v1beta1 kind: RoleBinding metadata: name: jenkins namespace: devops roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: jenkins subjects: - kind: ServiceAccount name: jenkins namespace: devops  静态slave 静态slave是在Kubernetes中创建一个固定的pod运行，跟之前我们用VM主机添加agent是一样的。 首先我们登陆Jenkins，创建一个agent，然后获取secret信息。 我们创建一个Deployment部署slave。在这里使用的镜像是jenkinsci/jnlp-slave:3.36-1，我在这里挂载了Docker和kubectl方便在pod中构建镜像和使用kubectl命令。挂载本地的一个目录用于workspace。 定义了环境变量JENKINS_URL,JENKINS_SECRET,JENKINS_AGENT_NAME,JENKINS_AGENT_WORKDIR。\n--- kind: Deployment apiVersion: apps/v1 metadata: labels: k8s-app: jenkinsagent name: jenkinsagent namespace: devops spec: replicas: 1 revisionHistoryLimit: 10 selector: matchLabels: k8s-app: jenkinsagent template: metadata: labels: k8s-app: jenkinsagent namespace: devops name: jenkinsagent spec: containers: - name: jenkinsagent image: jenkinsci/jnlp-slave:3.36-1 securityContext: privileged: true imagePullPolicy: IfNotPresent resources: limits: cpu: 1000m memory: 2Gi requests: cpu: 500m memory: 512Mi volumeMounts: - name: jenkinsagent-workdir mountPath: /home/jenkins/workspace - name: buildtools mountPath: /home/jenkins/buildtools - name: dockersock mountPath: \u0026quot;/var/run/docker.sock\u0026quot; - name: dockercmd mountPath: /usr/bin/docker - name: kubectlconfig mountPath: /home/jenkins/.kube/config - name: kubectlcmd mountPath: /usr/bin/kubectl env: - name: JENKINS_URL value: http://192.168.1.200:30080 - name: JENKINS_SECRET value: 5639cac0bf16bf15735d44bc435793417365f4dfa8fc72fb12737f3787091ae8 - name: JENKINS_AGENT_NAME value: build01 - name: JENKINS_AGENT_WORKDIR value: /home/jenkins/workspace volumes: - name: jenkinsagent-workdir hostPath: path: /data/devops/jenkins/workspace type: Directory - name: buildtools hostPath: path: /usr/local/buildtools type: Directory - name: kubectlconfig hostPath: path: /root/.kube/config - name: kubectlcmd hostPath: path: /usr/bin/kubectl - name: dockersock hostPath: path: /var/run/docker.sock - name: dockercmd hostPath: path: /usr/bin/docker  动态slave 安装kubernetes插件（安装完成后最好重启一下）。配置插件信息 系统设置 -\u0026gt; 最后面 Cloud -\u0026gt;增加一个云。\n制作Kubernetes证书\n 进入集群服务器 .kube/config 复制config文件中的certificate-authority-data内容，生成base64文件 ca.crt 复制config文件中的client-certificate-data内容，生成base64文件 client.crt 复制config文件中的client-key-data内容，生成base64文件 client.key\n echo zzzzzzzzz | base64 –d \u0026gt; client.key  生成证书（会输入密码需要记住后面jenkins需要配置）\n openssl pkcs12 -export -out cert.pfx -inkey client.key -in client.crt -certfile ca.crt  下载证书 cert.pfx\n  Jenkins新建凭据\n新建凭据 证书类型 上传刚刚下载的证书。并输入证书密码 将ca.crt 内容复制到 服务证书key 选择证书凭据 测试连接 编写Jenkinsfile测试\n文件地址： https://github.com/zeyangli/devops-on-k8s/blob/master/jenkinsfile/jenkinsslave.jenkinsfile\n关于Jenkinsfile的写法还有一种使用podtemplate感觉只是对yaml做了包装，学习成本高于原生yaml。所以这里直接使用了yaml定义的。\npipeline{ agent{ kubernetes{ label \u0026quot;test01\u0026quot; cloud 'kubernetes' yaml ''' --- kind: Pod apiVersion: v1 metadata: labels: k8s-app: jenkinsagent name: jenkinsagent namespace: devops spec: containers: - name: jenkinsagent image: jenkinsci/jnlp-slave:3.36-1 imagePullPolicy: IfNotPresent resources: limits: cpu: 1000m memory: 2Gi requests: cpu: 500m memory: 512Mi volumeMounts: - name: jenkinsagent-workdir mountPath: /home/jenkins/workspace - name: buildtools mountPath: /home/jenkins/buildtools env: - name: JENKINS_AGENT_WORKDIR value: /home/jenkins/workspace volumes: - name: jenkinsagent-workdir hostPath: path: /data/devops/jenkins/workspace type: Directory - name: buildtools hostPath: path: /usr/local/buildtools type: Directory ''' } } stages{ stage(\u0026quot;test\u0026quot;){ steps{ script{ sh \u0026quot;sleep 30\u0026quot; } } } } }  赶快运行一下吧！ 相信你已经成功了。\n"
},
{
	"uri": "/pipelineintegrated/chapter08/",
	"title": "3-8 自动化接口测试",
	"tags": [],
	"description": "",
	"content": " 您好，本章我们主要讲述Jenkins+jmeter自动化接口测试。\n 目录 接口测试定义为一种软件测试类型，用于验证两个不同软件系统之间的通信是否正确完成。集成两个组件的连接称为接口。计算机世界中的此接口可以是API，Web服务等之类的东西。这些连接服务或接口的测试称为接口测试。接口实际上是由一组命令，消息和其他允许设备与用户之间进行通信的属性组成的软件。\n运行测试用例 jmeter -n -t scripts/blog.jmx -l report.jtl -e -o report -Jjmeter.save.saveservice.output_format=csv  参数说明:\n \u000b-n: 非GUI模式执行JMeter\u000b -t: 执行测试文件所在的位置\u000b -l: 指定生成测试结果的保存文件，jtl文件格式\u000b -e: 测试结束后，生成测试报告\u000b-o: 指定测试报告的存放位置  看下运行的效果：测试报告已生成是HTML文件，可直接打开。\n批量运行用例 我们可以使用ant与Jmeter集成build.xml部分内容。 仓库地址：https://github.com/zeyangli/jmetertest.git\n\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;utf8\u0026quot;?\u0026gt; \u0026lt;!-- 拷贝报告所需的图片资源至目标目录 --\u0026gt; \u0026lt;project name=\u0026quot;ant-jmeter-test\u0026quot; default=\u0026quot;run\u0026quot; basedir=\u0026quot;.\u0026quot;\u0026gt; \u0026lt;tstamp\u0026gt; \u0026lt;format property=\u0026quot;time\u0026quot; pattern=\u0026quot;yyyyMMddHHmm\u0026quot; /\u0026gt; \u0026lt;/tstamp\u0026gt; \u0026lt;!-- 需要改成自己本地的jmeter目录--\u0026gt; \u0026lt;property name=\u0026quot;jmeter.home\u0026quot; value=\u0026quot;/usr/local/buildtools/apache-jmeter-5.2.1\u0026quot; /\u0026gt; \u0026lt;!-- jmeter生成的jtl格式的结果报告的路径--\u0026gt; \u0026lt;property name=\u0026quot;jmeter.result.jtl.dir\u0026quot; value=\u0026quot;./result/jtlfile\u0026quot; /\u0026gt; \u0026lt;!-- jmeter生成的html格式的结果报告的路径--\u0026gt; \u0026lt;property name=\u0026quot;jmeter.result.html.dir\u0026quot; value=\u0026quot;./result/htmlfile\u0026quot; /\u0026gt; \u0026lt;!-- ʺ生成的报告的前缀--\u0026gt; \u0026lt;property name=\u0026quot;ReportName\u0026quot; value=\u0026quot;TestReport_\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;jmeter.result.jtlName\u0026quot; value=\u0026quot;${jmeter.result.jtl.dir}/${ReportName}${time}.jtl\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;jmeter.result.htmlName\u0026quot; value=\u0026quot;${jmeter.result.html.dir}/${time}_SummaryReport.html\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;jmeter.detail.result.jtlName\u0026quot; value=\u0026quot;${jmeter.result.jtl.dir}/${ReportName}${time}.jtl\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;jmeter.detail.result.htmlName\u0026quot; value=\u0026quot;${jmeter.result.html.dir}/${time}_DetailReport.html\u0026quot; /\u0026gt; \u0026lt;target name=\u0026quot;run\u0026quot;\u0026gt; \u0026lt;antcall target=\u0026quot;test\u0026quot; /\u0026gt; \u0026lt;antcall target=\u0026quot;report\u0026quot; /\u0026gt; \u0026lt;/target\u0026gt; \u0026lt;target name=\u0026quot;test\u0026quot;\u0026gt; \u0026lt;taskdef name=\u0026quot;jmeter\u0026quot; classname=\u0026quot;org.programmerplanet.ant.taskdefs.jmeter.JMeterTask\u0026quot; /\u0026gt; \u0026lt;jmeter jmeterhome=\u0026quot;${jmeter.home}\u0026quot; resultlog=\u0026quot;${jmeter.result.jtlName}\u0026quot;\u0026gt; \u0026lt;!-- 声明要运行的脚本“*.jmx”指包含此目录下的所有jmeter脚本--\u0026gt; \u0026lt;testplans dir=\u0026quot;./scripts\u0026quot; includes=\u0026quot;*.jmx\u0026quot; /\u0026gt; \u0026lt;property name=\u0026quot;jmeter.save.saveservice.output_format\u0026quot; value=\u0026quot;xml\u0026quot;/\u0026gt; \u0026lt;/jmeter\u0026gt; \u0026lt;/target\u0026gt;  运行用例\nPassword: Buildfile: /Users/zeyang/Desktop/jmetertest-master/build.xml run: test: [jmeter] Executing test plan: /Users/zeyang/Desktop/jmetertest-master/scripts/blog.jmx ==\u0026gt; /Users/zeyang/Desktop/jmetertest-master/result/jtlfile/TestReport_202001100820.jtl [jmeter] Creating summariser \u0026lt;summary\u0026gt; [jmeter] Created the tree successfully using /Users/zeyang/Desktop/jmetertest-master/scripts/blog.jmx [jmeter] Starting the test @ Fri Jan 10 08:20:26 CST 2020 (1578615626561) [jmeter] Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445 [jmeter] summary = 2 in 00:00:00 = 8.2/s Avg: 64 Min: 59 Max: 70 Err: 0 (0.00%) [jmeter] Tidying up ... @ Fri Jan 10 08:20:27 CST 2020 (1578615627287) [jmeter] ... end of run report: [xslt] Processing /Users/zeyang/Desktop/jmetertest-master/result/jtlfile/TestReport_202001100820.jtl to /Users/zeyang/Desktop/jmetertest-master/result/htmlfile/202001100820_DetailReport.html [xslt] Loading stylesheet /usr/local/apache-jmeter-5.1.1/extras/jmeter.results.shanhe.me.xsl [xslt] Processing /Users/zeyang/Desktop/jmetertest-master/result/jtlfile/TestReport_202001100820.jtl to /Users/zeyang/Desktop/jmetertest-master/result/htmlfile/202001100820_SummaryReport.html [xslt] Loading stylesheet /usr/local/apache-jmeter-5.1.1/extras/jmeter-results-detail-report_21.xsl BUILD SUCCESSFUL Total time: 3 seconds  测试报告\n自动化测试 使用Jenkins集成ant 和jmeter进行接口测试,直接看Jenkinsfile吧。我们可以理解为执行了ant的构建命令去运行接口测试，然后通过publishHtml展示测试报告。\n#!groovy @Library('jenkinslibrary@master') _ //func from shareibrary def build = new org.devops.build() def tools = new org.devops.tools() def toemail = new org.devops.toemail() //env String buildType = \u0026quot;${env.buildType}\u0026quot; String buildShell = \u0026quot;${env.buildShell}\u0026quot; String srcUrl = \u0026quot;${env.srcUrl}\u0026quot; String branchName = \u0026quot;${env.branchName}\u0026quot; userEmail = \u0026quot;2560350642@qq.com\u0026quot; //pipeline pipeline{ agent { node { label \u0026quot;build\u0026quot;}} stages{ stage(\u0026quot;CheckOut\u0026quot;){ steps{ script{ println(\u0026quot;${branchName}\u0026quot;) tools.PrintMes(\u0026quot;获取代码\u0026quot;,\u0026quot;green\u0026quot;) checkout([$class: 'GitSCM', branches: [[name: \u0026quot;${branchName}\u0026quot;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-admin-user', url: \u0026quot;${srcUrl}\u0026quot;]]]) } } } stage(\u0026quot;Build\u0026quot;){ steps{ script{ tools.PrintMes(\u0026quot;执行打包\u0026quot;,\u0026quot;green\u0026quot;) build.Build(buildType,buildShell) //展示测试报告 publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'result/htmlfile', reportFiles: 'SummaryReport.html,DetailReport.html', reportName: 'InterfaceTestReport', reportTitles: '']) } } } } post { always{ script{ println(\u0026quot;always\u0026quot;) } } success{ script{ println(\u0026quot;success\u0026quot;) toemail.Email(\u0026quot;流水线成功\u0026quot;,userEmail) } } failure{ script{ println(\u0026quot;failure\u0026quot;) toemail.Email(\u0026quot;流水线失败了！\u0026quot;,userEmail) } } aborted{ script{ println(\u0026quot;aborted\u0026quot;) toemail.Email(\u0026quot;流水线被取消了！\u0026quot;,userEmail) } } } }  "
},
{
	"uri": "/tags/documentation/",
	"title": "documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/tutorial/",
	"title": "tutorial",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "基于Jenkins的DevOps流水线实践",
	"tags": [],
	"description": "",
	"content": " DevOps流水线教程-jenkins 我们的目标是要将软件开发生命周期的整个过程都自动化，从开发人员向代码库中提交代码开始，到将此代码投入生产环境中使用为止。为了使整个软件开发流程处于 DevOps 模式或自动化模式，我们就需要对 CI/CD 流水线进行自动化。因此，我们还需要一款自动化工具来做这件事情，它就是 Jenkins。\n课程内容 Jenkins篇：让大家认识jenkins，了解jenkins常用的功能； 流水线入门篇：讲解核心pipeline语法让每个人都能编写Jenkinsfile。\n流水线集成篇：完成常用的构建发布工具、系统间集成； 流水线实践篇：总结上面所有工具，完成端到端流水线最佳实践。\n流水线扩展篇：主要讲述DevOps工具链中其他系统的使用方式等内容；\n"
},
{
	"uri": "/shortcodes/attachments/",
	"title": "Attachments",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": " The Attachments shortcode displays a list of files attached to a page.\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Usage The shortcurt lists files found in a specific folder. Currently, it support two implementations for pages\n If your page is a markdown file, attachements must be place in a folder named like your page and ending with .files.\n  content  _index.md page.files  attachment.pdf  page.md    If your page is a folder, attachements must be place in a nested \u0026lsquo;files\u0026rsquo; folder.\n  content  _index.md page  index.md files  attachment.pdf       Be aware that if you use a multilingual website, you will need to have as many folders as languages.\nThat\u0026rsquo;s all !\nParameters    Parameter Default Description     title \u0026ldquo;Attachments\u0026rdquo; List\u0026rsquo;s title   style \u0026rdquo;\u0026rdquo; Choose between \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;grey\u0026rdquo;, \u0026ldquo;blue\u0026rdquo; and \u0026ldquo;green\u0026rdquo; for nice style   pattern \u0026rdquo;.*\u0026rdquo; A regular expressions, used to filter the attachments by file name. The pattern parameter value must be regular expressions.    For example:\n To match a file suffix of \u0026lsquo;jpg\u0026rsquo;, use .*jpg (not *.jpg). To match file names ending in \u0026lsquo;jpg\u0026rsquo; or \u0026lsquo;png\u0026rsquo;, use .*(jpg|png)  Examples List of attachments ending in pdf or mp4 {{%attachments title=\u0026quot;Related files\u0026quot; pattern=\u0026quot;.*(pdf|mp4)\u0026quot;/%}}  renders as\n  Related files   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Colored styled box {{%attachments style=\u0026quot;orange\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;grey\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;blue\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;green\u0026quot; /%}}  renders as\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    "
},
{
	"uri": "/shortcodes/attachments.fr/",
	"title": "Attachments (Pièces jointes)",
	"tags": [],
	"description": "The Attachments shortcode displays a list of files attached to a page.",
	"content": " Le shortcode Attachments affiche une liste de pièces jointes d\u0026rsquo;une page.\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Utilisation Le shortcode affiche la liste de fichiers trouvés dans un dossier spécifique A l\u0026rsquo;heure actuelle, il supporte deux implémentations\n Si votre page est un fichier Markdown, les pièces jointes doivent être placée dans un dossier nommé comme le nom de la page et suffixé par .files.\n  content  _index.md page.files  attachment.pdf  page.md    Si votre page est un dossier, les pièces jointes doivent être placées dans un dossier fils \u0026lsquo;files\u0026rsquo;.\n  content  _index.md page  index.md files  attachment.pdf       Attention, si votre site est multi-langue, vous devrez avec autant de dossier qu\u0026rsquo;il y a de langues.\nC\u0026rsquo;est tout !\nParamètres    Paramètre Défaut Description     title \u0026ldquo;Pièces jointes\u0026rdquo; Titre de la liste   style \u0026rdquo;\u0026rdquo; Choisir entre \u0026ldquo;orange\u0026rdquo;, \u0026ldquo;grey\u0026rdquo;, \u0026ldquo;blue\u0026rdquo; et \u0026ldquo;green\u0026rdquo; pour un style plus sympa   pattern \u0026rdquo;.*\u0026rdquo; Une expression régulière, utilisée pour filtrer les pièces jointes par leur nom de fichier. Le paramètre pattern doit être une expression régulière.    Par exemple:\n Pour trouver les fichiers avec le suffixe \u0026lsquo;jpg\u0026rsquo;, utilisez .*jpg (pas *.jpg). Pour trouver les fichiers avec les suffixe \u0026lsquo;jpg\u0026rsquo; ou \u0026lsquo;png\u0026rsquo;, utilisez .*(jpg|png)  Exemples Lister les pièces jointes de type pdf ou mp4 {{%attachments title=\u0026quot;Fichiers associés\u0026quot; pattern=\u0026quot;.*(pdf|mp4)\u0026quot;/%}}  s\u0026rsquo;affiche comme\n  Fichiers associés   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    Modifier le style {{%attachments style=\u0026quot;orange\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;grey\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;blue\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    {{%attachments style=\u0026quot;green\u0026quot; /%}}  s\u0026rsquo;affiche comme\n  Attachments   BachGavotteShort.mp3  (357 ko)   Carroll_AliceAuPaysDesMerveilles.pdf  (175 ko)   adivorciarsetoca00cape.pdf  (361 ko)   hugo.png  (17 ko)   movieselectricsheep-flock-244-32500-2.mp4  (340 ko)    "
},
{
	"uri": "/shortcodes/button/",
	"title": "Button",
	"tags": [],
	"description": "Nice buttons on your page.",
	"content": "A button is a just a clickable button with optional icon.\n{{% button href=\u0026quot;https://getgrav.org/\u0026quot; %}}Get Grav{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; %}}Get Grav with icon{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Get Grav with icon right{{% /button %}}   Get Grav   Get Grav with icon  Get Grav with icon right   "
},
{
	"uri": "/shortcodes/button.fr/",
	"title": "Button (Bouton)",
	"tags": [],
	"description": "De beaux boutons sur votre page.",
	"content": "Le shortcode button est simplement un bouton cliquable avec une icône optionnelle.\n{{% button href=\u0026quot;https://getgrav.org/\u0026quot; %}}Téléchargez Grav{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; %}}Téléchargez Grav avec icône{{% /button %}} {{% button href=\u0026quot;https://getgrav.org/\u0026quot; icon=\u0026quot;fas fa-download\u0026quot; icon-position=\u0026quot;right\u0026quot; %}}Téléchargez Grav avec icône à droite{{% /button %}}   Téléchargez Grav   Téléchargez Grav avec icône  Téléchargez Grav avec icône à droite   "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/shortcodes/children/",
	"title": "Children",
	"tags": [],
	"description": "List the child pages of a page",
	"content": " Use the children shortcode to list the child pages of a page and the further descendants (children\u0026rsquo;s children). By default, the shortcode displays links to the child pages.\nUsage    Parameter Default Description     page current Specify the page name (section name) to display children for   style \u0026ldquo;li\u0026rdquo; Choose the style used to display descendants. It could be any HTML tag name   showhidden \u0026ldquo;false\u0026rdquo; When true, child pages hidden from the menu will be displayed   description \u0026ldquo;false\u0026rdquo; Allows you to include a short text under each page in the list.when no description exists for the page, children shortcode takes the first 70 words of your content. read more info about summaries on gohugo.io   depth 1 Enter a number to specify the depth of descendants to display. For example, if the value is 2, the shortcode will display 2 levels of child pages.  Tips: set 999 to get all descendants   sort none Sort Children By\nWeight - to sort on menu orderName - to sort alphabetically on menu labelIdentifier - to sort alphabetically on identifier set in frontmatterURL - URL    Demo {{% children %}}   page 1   page 2   page 3   page test   page test   {{% children description=\u0026quot;true\u0026quot; %}}   page 1  This is a demo child page\n page 2  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n page 3  This is a demo child page\n page test  This is a page test\n page test  Ceci est une page test\n {{% children depth=\u0026quot;3\u0026quot; showhidden=\u0026quot;true\u0026quot; %}}   page 1    page 1-1    page 1-1-1   \n page 2 \n  page test 3     page test 3 \n  \n page 3 \n   page 4 \n   page test \n  page 1    page 1-1    page 2 \n  page test 3   page test 3    page 3 \n   page 4 \n  \n page test \n  page 1    page 1-1    page 2 \n  page test 3   page test 3    page 3 \n   page 4 \n  \n\n{{% children style=\u0026quot;h2\u0026quot; depth=\u0026quot;3\u0026quot; description=\u0026quot;true\u0026quot; %}}   page 1  This is a demo child page\n page 1-1  This is a demo child page\n page 1-1-1  This is a demo child page\n page 2  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n page test 3  This is a page test\n page test 3  Ceci est une page test\n page 3  This is a demo child page\n page test  This is a page test\n page 1  This is a demo child page\n page 1-1  This is a demo child page\n page 2  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n page test 3  This is a page test\n page test 3  Ceci est une page test\n page 3  This is a demo child page\n page test  Ceci est une page test\n page 1  This is a demo child page\n page 1-1  This is a demo child page\n page 2  Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n page test 3  This is a page test\n page test 3  Ceci est une page test\n page 3  This is a demo child page\n {{% children style=\u0026quot;div\u0026quot; depth=\u0026quot;999\u0026quot; %}}   page 1   page 1-1   page 1-1-1   page 1-1-1-1   page 1-1-1-1-1   page 2   page test 3   page test 3   page 3   page test   page 1   page 1-1   page 1-1-1   page 1-1-1-1   page 1-1-1-1-1   page 2   page test 3   page test 3   page 3   page test   page 1   page 1-1   page 1-1-1   page 1-1-1-1   page 1-1-1-1-1   page 2   page test 3   page test 3   page 3   "
},
{
	"uri": "/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": " Contributors Thanks to them  for making Open Source Software a better place !\n.ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start }\n.ghContributors \u0026gt; div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors \u0026gt; div label{ padding-left: 4px ; } .ghContributors \u0026gt; div span{ font-size: x-small; padding-left: 4px ; }\n  @matcornic 162 commits \n @matalo33 39 commits \n @coliff 18 commits \n @lierdakil 16 commits \n @gwleclerc 13 commits \n @mdavids 10 commits \n @ozobi 5 commits \n @Xipas 5 commits \n @pdelaby 4 commits \n @Chris-Greaves 3 commits \n @mreithub 3 commits \n @massimeddu 3 commits \n @LinuxSuRen 3 commits \n @dptelecom 3 commits \n @willwade 3 commits \n @diemol 2 commits \n @denisvm 2 commits \n @gpospelov 2 commits \n @hucste 2 commits \n @jamesbooker 2 commits \n @tanzaho 2 commits \n @wikijm 2 commits \n @lfalin 2 commits \n @alexvargasbenamburg 1 commits \n @afs2015 1 commits \n @arifpedia 1 commits \n @berryp 1 commits \n @MrMoio 1 commits \n @ChrisLasar 1 commits \n @IEvangelist 1 commits \n @geoffreybauduin 1 commits \n @giuliov 1 commits \n @haitch 1 commits \n @ImgBotApp 1 commits \n @zeegin 1 commits \n @RealOrangeOne 1 commits \n @JohnBlood 1 commits \n @JohnAllen2tgt 1 commits \n @kamilchm 1 commits \n @lloydbenson 1 commits \n @massimocireddu 1 commits \n @sykesm 1 commits \n @nvasudevan 1 commits \n @owulveryck 1 commits \n @654wak654 1 commits \n @PierreAdam 1 commits \n @ripienaar 1 commits \n @pocc 1 commits \n @EnigmaCurry 1 commits \n @taiidani 1 commits \n @exKAZUu 1 commits \n @Oddly 1 commits \n @shelane 1 commits \n @tedyoung 1 commits \n @Thiht 1 commits \n @editicalu 1 commits \n @fossabot 1 commits \n @kamar535 1 commits \n @nonumeros 1 commits \n @pgorod 1 commits \n @proelbtn 1 commits \n\nAnd a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.\nPackages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  Tooling  Netlify - Continuous deployement and hosting of this documentation Hugo  "
},
{
	"uri": "/shortcodes/expand/",
	"title": "Expand",
	"tags": [],
	"description": "Displays an expandable/collapsible section of text on your page",
	"content": " The Expand shortcode displays an expandable/collapsible section of text on your page. Here is an example\n  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  Usage this shortcode takes exactly one optional parameter to define the text that appears next to the expand/collapse icon. (default is \u0026ldquo;Expand me\u0026hellip;\u0026rdquo;)\n{{%expand \u0026quot;Is this learn theme rocks ?\u0026quot; %}}Yes !.{{% /expand%}}    Is this learn theme rocks ?   Yes !   Demo {{%expand%}} Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {{% /expand%}}    Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  "
},
{
	"uri": "/shortcodes/expand.fr/",
	"title": "Expand",
	"tags": [],
	"description": "Affiche une section de texte qui se plie et se déplie",
	"content": " Le shortcode Expand affiche une section de texte qui se plie et se déplie. Ci-dessous un exemple.\n  Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  Utilisation Ce shortcode prends exactement un paramètre optionel pour définir le texte à côté de l\u0026rsquo;icone. (valeur par défaut est \u0026ldquo;Déroulez-moi\u0026hellip;\u0026rdquo;)\n{{%expand \u0026quot;Est-ce que ce thème envoie du pâté ?\u0026quot; %}}Oui !.{{% /expand%}}    Est-ce que ce thème envoie du pâté ?   Oui !   Demo {{%expand%}} Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. {{% /expand%}}    Expand me...   Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  "
},
{
	"uri": "/shortcodes/mermaid/",
	"title": "Mermaid",
	"tags": [],
	"description": "Generation of diagram and flowchart from text in a similar manner as markdown",
	"content": " Mermaid is a library helping you to generate diagram and flowcharts from text, in a similar manner as Markdown.\nJust insert your mermaid code in the mermaid shortcode and that\u0026rsquo;s it.\nFlowchart example {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngraph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two]  or you can use this alternative syntax:\n ```mermaid graph LR; A[Hard edge] --|Link text| B(Round edge) B -- C{Decision} C --|One| D[Result one] C --|Two| E[Result two] ```  renders as\ngraph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two]  Sequence example {{\u0026lt;mermaid\u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! {{\u0026lt; /mermaid \u0026gt;}}  renders as\nsequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good!  or you can use this alternative syntax:\n ```mermaid sequenceDiagram participant Alice participant Bob Alice-John: Hello John, how are you? loop Healthcheck John-John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--Alice: Great! John-Bob: How about you? Bob--John: Jolly good! ```  renders as\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good!  GANTT Example {{\u0026lt;mermaid\u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d  or you can use this alternative syntax:\n ```mermaid gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d ```  renders as\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d  Class example  ```mermaid classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label  Git example  ```mermaid gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ```  renders as\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch  "
},
{
	"uri": "/shortcodes/mermaid.fr/",
	"title": "Mermaid",
	"tags": [],
	"description": "Génération de diagrammes à partir de texte, dans le même style que Markdown",
	"content": " Mermaid est une bibliothèque Javascript qui permet de générer des diagrammes (séquence, état, gantt, etc.) à partir de texte, dans le même style que Markdown.\nInsérer votre code Mermaid dans un shortcode mermaid et c\u0026rsquo;est tout.\nFlowchart example {{\u0026lt;mermaid align=\u0026quot;left\u0026quot;\u0026gt;}} graph LR; A[Bords droits] --\u0026gt;|Lien texte| B(Bords arondis) B --\u0026gt; C{Décision} C --\u0026gt;|Un| D[Résultat un] C --\u0026gt;|Deux| E[Résultat deux] {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngraph LR; A[Bords droits] --|Lien texte| B(Bords arondis) B -- C{Décision} C --|Un| D[Résultat un] C --|Deux| E[Résultat deux]  or you can use this alternative syntax:\n ```mermaid graph LR; A[Bords droits] --|Lien texte| B(Bords arondis) B -- C{Décision} C --|Un| D[Résultat un] C --|Deux| E[Résultat deux] ```  renders as\ngraph LR; A[Bords droits] --\u0026gt;|Lien texte| B(Bords arondis) B --\u0026gt; C{Décision} C --\u0026gt;|Un| D[Résultat un] C --\u0026gt;|Deux| E[Résultat deux]  Sequence example {{\u0026lt;mermaid\u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Salut John, comment vas-tu? loop Vérification John-\u0026gt;John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnelles\u0026lt;br/\u0026gt;prédominent... John--\u0026gt;Alice: Super! John-\u0026gt;Bob: Et toi? Bob--\u0026gt;John: Au top! {{\u0026lt; /mermaid \u0026gt;}}  renders as\nsequenceDiagram participant Alice participant Bob Alice-John: Salut John, comment vas-tu? loop Vérification John-John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnellesprédominent... John--Alice: Super! John-Bob: Et toi? Bob--John: Au top!  or you can use this alternative syntax:\n ```mermaid sequenceDiagram participant Alice participant Bob Alice-John: Salut John, comment vas-tu? loop Vérification John-John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnellesprédominent... John--Alice: Super! John-Bob: Et toi? Bob--John: Au top! ```  renders as\nsequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Salut John, comment vas-tu? loop Vérification John-\u0026gt;John: Se bat contre l'hyponcodrie. end Note right of John: Les pensées rationnelles\u0026lt;br/\u0026gt;prédominent... John--\u0026gt;Alice: Super! John-\u0026gt;Bob: Et toi? Bob--\u0026gt;John: Au top!  GANTT Example {{\u0026lt;mermaid\u0026gt;}} gantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d {{\u0026lt; /mermaid \u0026gt;}}  renders as\ngantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d  or you can use this alternative syntax:\n ```mermaid gantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d ```  renders as\ngantt dateFormat YYYY-MM-DD title Ajout de la fonctionnalité de GANTT à Mermaid section Une section Tâche complétée :done, des1, 2014-01-06,2014-01-08 Tâche en cours :active, des2, 2014-01-09, 3d Future tâche : des3, after des2, 5d Future tâche 2 : des4, after des3, 5d section Tâches critiques Tâche complétée dans le chemin critique :crit, done, 2014-01-06,24h Implémenter le parser et jison :crit, done, after des1, 2d Créer des tests pour le parser :crit, active, 3d Future tâche dans le chemin critique :crit, 5d Créer des tests pour le renderer :2d Ajout à Mermaid :1d  Class example  ```mermaid classDiagram Class01 C2 : Where am i? Class09 --* C3 Class09 --| Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08  C2: Cool label ```  renders as\nclassDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label  Git example  ```mermaid gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ```  renders as\ngitGraph: options { \u0026quot;nodeSpacing\u0026quot;: 150, \u0026quot;nodeRadius\u0026quot;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch  "
},
{
	"uri": "/shortcodes/notice/",
	"title": "Notice",
	"tags": [],
	"description": "Disclaimers to help you structure your page",
	"content": " The notice shortcode shows 4 types of disclaimers to help you structure your page.\nNote {{% notice note %}} A notice disclaimer {{% /notice %}}  renders as\nA notice disclaimer\n Info {{% notice info %}} An information disclaimer {{% /notice %}}  renders as\nAn information disclaimer\n Tip {{% notice tip %}} A tip disclaimer {{% /notice %}}  renders as\nA tip disclaimer\n Warning {{% notice warning %}} A warning disclaimer {{% /notice %}}  renders as\nA warning disclaimer\n "
},
{
	"uri": "/shortcodes/notice.fr/",
	"title": "Notice",
	"tags": [],
	"description": "Message pour vous aider à structurer votre contenu",
	"content": " Le shortcode Notice permet d\u0026rsquo;afficher 4 types de message pour vous aider à structurer votre contenu.\nNote {{% notice note %}} Une notice de type *note* {{% /notice %}}  s\u0026rsquo;affiche comme\nUne notice de type note\n Info {{% notice info %}} Une notice de type *info* {{% /notice %}}  s\u0026rsquo;affiche comme\nUne notice de type info\n Tip {{% notice tip %}} Une notice de type *tip* {{% /notice %}}  s\u0026rsquo;affiche comme\nUne notice de type tip\n Warning {{% notice warning %}} Une notice de type *warning* {{% /notice %}}  s\u0026rsquo;affiche comme\nUne notice de type warning\n "
},
{
	"uri": "/shortcodes/children/children-1/",
	"title": "page 1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/",
	"title": "page 1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/",
	"title": "page 1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/",
	"title": "page 1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-1/children-1-1/children-1-1-1/children-1-1-1-1/children-1-1-1-1-1/",
	"title": "page 1-1-1-1-1",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page\n"
},
{
	"uri": "/shortcodes/children/children-2/",
	"title": "page 2",
	"tags": [],
	"description": "",
	"content": "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n"
},
{
	"uri": "/shortcodes/children/children-3/",
	"title": "page 3",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page, not displayed in the menu\n"
},
{
	"uri": "/shortcodes/children/children-4/",
	"title": "page 4",
	"tags": [],
	"description": "This is a demo child page",
	"content": "This is a demo child page, not displayed in the menu\n"
},
{
	"uri": "/shortcodes/children/test/",
	"title": "page test",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test demo child page\n"
},
{
	"uri": "/shortcodes/children/test.fr/",
	"title": "page test",
	"tags": [],
	"description": "Ceci est une page test",
	"content": "Ceci est une page de demo\n"
},
{
	"uri": "/shortcodes/children/children-2/test3/",
	"title": "page test 3",
	"tags": [],
	"description": "This is a page test",
	"content": "This is a test 3 demo child page\n"
},
{
	"uri": "/shortcodes/children/children-2/test3.fr/",
	"title": "page test 3",
	"tags": [],
	"description": "Ceci est une page test",
	"content": "Ceci est une page de demo test 3\n"
},
{
	"uri": "/showcase/",
	"title": "Showcase",
	"tags": [],
	"description": "",
	"content": " TAT by OVH Tshark.dev by Ross Jacobs "
},
{
	"uri": "/shortcodes/siteparam/",
	"title": "Site param",
	"tags": [],
	"description": "Get value of site params variables in your page.",
	"content": "siteparam shortcode is used to help you print values of site params.\nFor instance, in this current site, the editURL variable is used in config.toml\n[params] editURL = \u0026quot;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/\u0026quot;  Use the siteparam shortcode to display its value.\n`editURL` Value : {{% siteparam \u0026quot;editURL\u0026quot; %}}  is displayed as\neditURL Value :\n"
},
{
	"uri": "/shortcodes/siteparam.fr/",
	"title": "Site param",
	"tags": [],
	"description": "Afficher la valeur d&#39;un paramètre global du site dans votre page",
	"content": "Les shortcode siteparam est utilisé pour vous aider à afficher des valeurs provenant des paramètres globaux du site.\nPar exemple, dans ce site, le paramètre editURL est utilisé dans le fichier config.toml\n[params] editURL = \u0026quot;https://github.com/matcornic/hugo-theme-learn/edit/master/exampleSite/content/\u0026quot;  Utilisez le shortcode siteparam pour affichier sa valeur.\nValeur de `editURL` : {{% siteparam \u0026quot;editURL\u0026quot; %}}  s\u0026rsquo;affiche comme\nValeur de editURL :\n"
}]